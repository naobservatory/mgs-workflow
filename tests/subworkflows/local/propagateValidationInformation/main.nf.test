nextflow_workflow {

    name "Test workflow PROPAGATE_VALIDATION_INFORMATION"
    script "subworkflows/local/propagateValidationInformation/main.nf"
    workflow "PROPAGATE_VALIDATION_INFORMATION"
    config "tests/configs/downstream.config"
    tag "subworkflow"
    tag "downstream"
    tag "propagate_validation_information"

    test("Should run without failures on valid input data") {
        tag "expect_success"
        when {
            params {
                hits_tsv = "${projectDir}/test-data/toy-data/propagate-validation/test-hits.tsv"
                cluster_tsv = "${projectDir}/test-data/toy-data/propagate-validation/test-cluster.tsv"
                validation_tsv = "${projectDir}/test-data/toy-data/propagate-validation/test-validation.tsv"
                taxid_column = "taxid"
            }
            workflow {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.hits_tsv)) // hits_tsv
                input[1] = Channel.of("test").combine(Channel.of(params.cluster_tsv)) // cluster_tsv
                input[2] = Channel.of("test").combine(Channel.of(params.validation_tsv)) // validation_tsv
                input[3] = params.taxid_column // taxid_column
                '''
            }
        }
        then {
            // Should run without failures
            assert workflow.success
            // Row and column counts should match expected values
            def tab_hits_in = path(params.hits_tsv).csv(sep: "\t")
            def tab_cluster_in = path(params.cluster_tsv).csv(sep: "\t")
            def tab_validation_in = path(params.validation_tsv).csv(sep: "\t")
            def tab_select = path(workflow.out.test_select[0][1]).csv(sep: "\t")
            def tab_intermediate = path(workflow.out.test_intermediate[0][1]).csv(sep: "\t", decompress: true)
            def tab_out = path(workflow.out.output[0][1]).csv(sep: "\t", decompress: true)
            assert tab_intermediate.rowCount == tab_hits_in.rowCount
            assert tab_intermediate.columnCount == tab_cluster_in.columnCount + tab_select.columnCount - 1
            assert tab_out.rowCount == tab_intermediate.rowCount
            assert tab_out.columnCount == tab_intermediate.columnCount + tab_hits_in.columnCount - 1
            // Sequence IDs should be unchanged across subworkflow
            assert tab_out.columns["seq_id"].toSorted() == tab_hits_in.columns["seq_id"].toSorted()
            assert tab_intermediate.columns["seq_id"].toSorted() == tab_hits_in.columns["seq_id"].toSorted()
        }
    }
}