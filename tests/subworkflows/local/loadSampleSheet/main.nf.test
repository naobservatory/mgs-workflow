nextflow_workflow {

    name "Test subworkflow LOAD_SAMPLESHEET"
    script "subworkflows/local/loadSampleSheet/main.nf"
    workflow "LOAD_SAMPLESHEET"
    tag "load_samplesheet"
    tag "subworkflow"

    test("Test paired-end samplesheet") {
        tag "expect_success"
        tag "paired_end"
        config "tests/configs/run.config"
        when {
            params {}
            workflow {
                """
                input[0] = file("${projectDir}/test-data/samplesheet.csv")
                """
            }
        }

        then {
            // Should run without errors
            assert workflow.success
            // Should produce correctly structured output
            def tab_in = path(workflow.out.test_input[0]).csv
            assert workflow.out.samplesheet.size() == tab_in.rowCount
            for (int i=1; i < tab_in.rowCount; i++){
                def entry = workflow.out.samplesheet[i]
                assert entry.size() == 2
                assert entry[1].size() == 2
                assert entry[0] == tab_in.columns["sample"][i]
                assert entry[1][0] == tab_in.columns["fastq_1"][i]
                assert entry[1][1] == tab_in.columns["fastq_2"][i]
            }
            // Should correctly infer pairing status
            assert workflow.out.single_end.size() == 1
            assert workflow.out.single_end[0] == false
        }
    }

    test("Test single-end samplesheet") {
        tag "expect_success"
        tag "single_end"
        config "tests/configs/run.config"
        when {
            params {}
            workflow {
                """
                input[0] = file("${projectDir}/test-data/single-end-samplesheet.csv")
                """
            }
        }

        then {
            // Should run without errors
            assert workflow.success
            // Should produce correctly structured output
            def tab_in = path(workflow.out.test_input[0]).csv
            assert workflow.out.samplesheet.size() == tab_in.rowCount
            for (int i=1; i < tab_in.rowCount; i++){
                def entry = workflow.out.samplesheet[i]
                assert entry.size() == 2
                assert entry[0] == tab_in.columns["sample"][i]
                assert entry[1] == tab_in.columns["fastq"][i]
            }
            // Should correctly infer pairing status
            assert workflow.out.single_end.size() == 1
            assert workflow.out.single_end[0] == true
        }
    }

    test("Test incorrect samplesheet") {
        tag "expect_failed"
        tag "paired_end"
        config "tests/configs/run.config"
        when {
            params {}
            workflow {
                """
                input[0] = file("${projectDir}/test-data/toy-data/incorrect-samplesheet.csv")
                """
            }
        }

        then {
            assert workflow.failed
            assert workflow.exitStatus == 1
            assert workflow.stdout.any { it.contains("Invalid samplesheet header") }
        }
    }

}
