nextflow_workflow {

    name "Test subworkflow LOAD_SAMPLESHEET"
    script "subworkflows/local/loadSampleSheet/main.nf"
    workflow "LOAD_SAMPLESHEET"
    tag "load_samplesheet"
    tag "subworkflow"

    test("Should run without errors for paired-end Illumina samplesheet") {
        tag "expect_success"
        tag "paired_end"
        config "tests/configs/run.config"
        when {
            params {}
            workflow {
                """
                input[0] = file("${projectDir}/test-data/samplesheet.csv")
                input[1] = "illumina"
                input[2] = false
                """
            }
        }
        then {
            // Should run without errors
            assert workflow.success
            // Should produce correctly structured output
            def tab_in = path(workflow.out.test_input[0]).csv
            assert workflow.out.samplesheet.size() == tab_in.rowCount
            for (int i=1; i < tab_in.rowCount; i++){
                def entry = workflow.out.samplesheet[i]
                assert entry.size() == 2
                assert entry[1].size() == 2
                assert entry[0] == tab_in.columns["sample"][i]
                assert entry[1][0] == tab_in.columns["fastq_1"][i]
                assert entry[1][1] == tab_in.columns["fastq_2"][i]
            }
            // Should correctly infer pairing status
            assert workflow.out.single_end.size() == 1
            assert workflow.out.single_end[0] == false
        }
    }

    test("Should run without errors for paired-end AVITI samplesheet") {
        tag "expect_success"
        tag "paired_end"
        config "tests/configs/run.config"
        when {
            params {}
            workflow {
                """
                input[0] = file("${projectDir}/test-data/samplesheet.csv")
                input[1] = "aviti"
                input[2] = false
                """
            }
        }
        then {
            // Should run without errors
            assert workflow.success
            // Should produce correctly structured output
            def tab_in = path(workflow.out.test_input[0]).csv
            assert workflow.out.samplesheet.size() == tab_in.rowCount
            for (int i=1; i < tab_in.rowCount; i++){
                def entry = workflow.out.samplesheet[i]
                assert entry.size() == 2
                assert entry[1].size() == 2
                assert entry[0] == tab_in.columns["sample"][i]
                assert entry[1][0] == tab_in.columns["fastq_1"][i]
                assert entry[1][1] == tab_in.columns["fastq_2"][i]
            }
            // Should correctly infer pairing status
            assert workflow.out.single_end.size() == 1
            assert workflow.out.single_end[0] == false
        }
    }

    test("Should run without errors for single-end ONT samplesheet") {
        tag "expect_success"
        tag "single_end"
        config "tests/configs/run.config"
        when {
            params {}
            workflow {
                """
                input[0] = file("${projectDir}/test-data/ont-samplesheet.csv")
                input[1] = "ont"
                input[2] = false
                """
            }
        }
        then {
            // Should run without errors
            assert workflow.success
            // Should produce correctly structured output
            def tab_in = path(workflow.out.test_input[0]).csv
            assert workflow.out.samplesheet.size() == tab_in.rowCount
            for (int i=1; i < tab_in.rowCount; i++){
                def entry = workflow.out.samplesheet[i]
                assert entry.size() == 2
                assert entry[0] == tab_in.columns["sample"][i]
                assert entry[1] == tab_in.columns["fastq"][i]
            }
            // Should correctly infer pairing status
            assert workflow.out.single_end.size() == 1
            assert workflow.out.single_end[0] == true
        }
    }

    test("Should fail on invalid samplesheet") {
        tag "expect_failed"
        tag "paired_end"
        config "tests/configs/run.config"
        when {
            params {}
            workflow {
                """
                input[0] = file("${projectDir}/test-data/toy-data/incorrect-samplesheet.csv")
                input[1] = "illumina"
                """
            }
        }
        then {
            assert workflow.failed
            assert workflow.exitStatus == 1
            assert workflow.stdout.any { it.contains("Invalid samplesheet header") }
        }
    }

    test("Should fail on invalid platform") {
        tag "expect_failed"
        tag "paired_end"
        config "tests/configs/run.config"
        when {
            params {}
            workflow {
                """
                input[0] = file("${projectDir}/test-data/samplesheet.csv")
                input[1] = "invalid-test"
                """
            }
        }
        then {
            assert workflow.failed
            assert workflow.exitStatus == 1
            assert workflow.stdout.any { it.contains("Invalid sequencing platform.") }
        }
    }

    test("Should reject single-end Illumina samplesheet in production mode") {
        tag "expect_success"
        tag "single_end"
        config "tests/configs/run.config"
        when {
            params {}
            workflow {
                """
                input[0] = file("${projectDir}/test-data/single-end-samplesheet.csv")
                input[1] = "illumina"
                input[2] = false
                """
            }
        }
        then {
            assert workflow.failed
            assert workflow.exitStatus == 1
            assert workflow.stdout.any { it.contains("Pipeline is only implemented in production for platform 'illumina' for paired-end data.") }
        }
    }

    test("Should reject single-end AVITI samplesheet in production mode") {
        tag "expect_success"
        tag "single_end"
        config "tests/configs/run.config"
        when {
            params {}
            workflow {
                """
                input[0] = file("${projectDir}/test-data/single-end-samplesheet.csv")
                input[1] = "aviti"
                input[2] = false
                """
            }
        }
        then {
            assert workflow.failed
            assert workflow.exitStatus == 1
            assert workflow.stdout.any { it.contains("Pipeline is only implemented in production for platform 'aviti' for paired-end data.") }
        }
    }

    test("Should reject PacBio samplesheet in production mode") {
        tag "expect_success"
        tag "single_end"
        config "tests/configs/run.config"
        when {
            params {}
            workflow {
                """
                input[0] = file("${projectDir}/test-data/ont-samplesheet.csv")
                input[1] = "pacbio"
                input[2] = false
                """
            }
        }
        then {
            assert workflow.failed
            assert workflow.exitStatus == 1
            def msg = "Pipeline not yet implemented for platform 'pacbio'."
            assert workflow.stdout.any { it.contains(msg) }
        }
    }

    test("Should run without errors for single-end Illumina samplesheet in development mode") {
        tag "expect_success"
        tag "single_end"
        config "tests/configs/run.config"
        when {
            params {}
            workflow {
                """
                input[0] = file("${projectDir}/test-data/single-end-samplesheet.csv")
                input[1] = "illumina"
                input[2] = true
                """
            }
        }
        then {
            // Should run without errors
            assert workflow.success
            // Should produce correctly structured output
            def tab_in = path(workflow.out.test_input[0]).csv
            assert workflow.out.samplesheet.size() == tab_in.rowCount
            for (int i=1; i < tab_in.rowCount; i++){
                def entry = workflow.out.samplesheet[i]
                assert entry.size() == 2
                assert entry[0] == tab_in.columns["sample"][i]
                assert entry[1] == tab_in.columns["fastq"][i]
            }
            // Should correctly infer pairing status
            assert workflow.out.single_end.size() == 1
            assert workflow.out.single_end[0] == true
        }
    }

}
