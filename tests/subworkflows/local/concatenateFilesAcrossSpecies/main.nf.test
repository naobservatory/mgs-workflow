nextflow_workflow {

    name "Test workflow CONCATENATE_FILES_ACROSS_SPECIES"
    script "subworkflows/local/concatenateFilesAcrossSpecies/main.nf"
    workflow "CONCATENATE_FILES_ACROSS_SPECIES"
    config "tests/configs/run.config"
    tag "subworkflow"
    tag "concatenate_files_across_species"

    setup {
        run("COPY_FILE_BARE", alias: "COPY_FASTA_1") {
            script "modules/local/copyFile/main.nf"
            process {
                """
                input[0] = "${projectDir}/test-data/toy-data/test-random.fasta"
                input[1] = "group1_12345.fasta"
                """
            }
        }
        run("COPY_FILE_BARE", alias: "COPY_FASTA_2") {
            script "modules/local/copyFile/main.nf"
            process {
                """
                input[0] = "${projectDir}/test-data/toy-data/test-random.fasta"
                input[1] = "group1_67890.fasta"
                """
            }
        }
        run("COPY_FILE_BARE", alias: "COPY_FASTA_3") {
            script "modules/local/copyFile/main.nf"
            process {
                """
                input[0] = "${projectDir}/test-data/toy-data/test-random.fasta"
                input[1] = "group2_11111.fasta"
                """
            }
        }
    }

    test("Should correctly handle valid input data") {
        tag "expect_success"
        when {
            params {
            }
            workflow {
                '''
                input[0] = Channel.of("group1_12345").combine(COPY_FASTA_1.out)
                    | concat(Channel.of("group1_67890").combine(COPY_FASTA_2.out))
                    | concat(Channel.of("group2_11111").combine(COPY_FASTA_3.out))
                input[1] = "concat_reps"
                '''
            }
        }
        then {
            // Should run without failures
            assert workflow.success
            // Should correctly group and concatenate FASTAs
            def labels_in = workflow.out.test_input.collect{it[0]}
            def groups_in_raw = labels_in.collect{it.tokenize("_")[0..-2].join("_")}
            def groups_in = groups_in_raw.toSorted().unique()
            def labels_out = workflow.out.output.collect{it[0]}
            assert groups_in.size() == labels_out.size()
            assert groups_in.toSorted() == labels_out.toSorted()
            // Check that group1 has concatenated content from two files
            def group1_output = workflow.out.output.find{it[0] == "group1"}
            assert group1_output != null
            def group1_content = path(group1_output[1]).text.split("\n")
            def fasta1_content = path(workflow.out.test_input[0][1]).text.split("\n")
            def fasta2_content = path(workflow.out.test_input[1][1]).text.split("\n")
            assert group1_content == fasta1_content + fasta2_content
            // Check that group2 has single file content preserved
            def group2_output = workflow.out.output.find{it[0] == "group2"}
            assert group2_output != null
            assert path(group2_output[1]).md5 == path(workflow.out.test_input[2][1]).md5
        }
    }

    test("Should correctly parse group labels with underscores") {
        tag "expect_success"
        when {
            params {
            }
            workflow {
                '''
                input[0] = Channel.of("complex_group_name_12345").combine(COPY_FASTA_1.out)
                    | concat(Channel.of("complex_group_name_67890").combine(COPY_FASTA_2.out))
                input[1] = "concat_reps"
                '''
            }
        }
        then {
            // Should run without failures
            assert workflow.success
            // Should correctly extract group name with underscores
            def output_label = workflow.out.output[0][0]
            assert output_label == "complex_group_name"
        }
    }

    test("Should fail with invalid group/species label format") {
        tag "expect_failed"
        when {
            params {
            }
            workflow {
                '''
                input[0] = Channel.of("invalid_label_format").combine(COPY_FASTA_1.out)
                input[1] = "concat_reps"
                '''
            }
        }
        then {
            assert workflow.failed
            assert workflow.errorReport.contains("Group label doesn't match required pattern")
        }
    }

}