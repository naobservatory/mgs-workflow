nextflow_workflow {

    name "Test workflow PREPARE_GROUP_TSVS"
    script "subworkflows/local/prepareGroupTsvs/main.nf"
    workflow "PREPARE_GROUP_TSVS"
    config "tests/run.config"
    tag "subworkflow"
    tag "downstream"
    tag "prepare_group_tsvs"

    setup {
        run("LOAD_DOWNSTREAM_DATA") {
            script "subworkflows/local/loadDownstreamData/main.nf"
            process {
                """
                input[0] = "${projectDir}/test-data/downstream/input_file.csv"
                """
            }
        }
    }

    test("Should run without failures") {
        tag "expect_success"
        when {
            params {
            }
            workflow {
                '''
                input[0] = LOAD_DOWNSTREAM_DATA.out.input
                '''
            }
        }
        then {
            // Should run without failures
            assert workflow.success
            // Output of join should have expected dimensions
            def input_tabs = workflow.out.test_in.collect{path(it[0][1]).csv(sep: "\t", decompress: true)}
            def group_tabs = workflow.out.test_in.collect{path(it[0][2]).csv(sep: "\t", decompress: true)}
            def output_tabs = workflow.out.test_join.collect{path(it[0][1]).csv(sep: "\t", decompress: true)}
            assert input_tabs.size() == group_tabs.size()
            assert input_tabs.size() == output_tabs.size()
            for (int i=0; i < input_tabs.size; i++){
                assert input_tabs[i].rowCount == output_tabs[i].rowCount
                assert input_tabs[i].columnCount + group_tabs[i].columnCount - 1 == output_tabs[i].columnCount
            }
        }
    }
}
