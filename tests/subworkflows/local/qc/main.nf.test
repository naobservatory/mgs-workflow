nextflow_workflow {

    name "Test subworkflow QC"
    script "subworkflows/local/qc/main.nf"
    workflow "QC"
    tag "subworkflow"
    tag "qc"

    test("Should run without failures on paired data") {
        config "tests/configs/run.config"
        tag "expect_success"
        tag "interleaved"
        setup {
            run("LOAD_SAMPLESHEET") {
                script "subworkflows/local/loadSampleSheet/main.nf"
                workflow {
                    '''
                    input[0] = "${projectDir}/test-data/samplesheet.csv"
                    '''
                }
            }
            run("INTERLEAVE_FASTQ") {
                script "modules/local/interleaveFastq/main.nf"
                process {
                    '''
                    input[0] = LOAD_SAMPLESHEET.out.samplesheet
                    '''
                }
            }
        }
        when {
            params {}
            workflow {
                """
                input[0] = INTERLEAVE_FASTQ.out.output
                input[1] = "1"
                input[2] = "1 GB"
                input[3] = "test"
                input[4] = LOAD_SAMPLESHEET.out.single_end
                """
            }
        }
        then {
            // Should run without failures
            assert workflow.success
            // Basic stats TSV should have expected structure and content
            def tsv_basic = path(workflow.out.qc[0][0]).csv(sep: "\t", decompress: true)
            def fastq_in = path(workflow.out.test_input[0][1]).fastq
            def seqs_in = fastq_in.sequences
            def n_bases = seqs_in.collect{ it.length() }.sum()
            with (tsv_basic) {
                assert rowCount == 1
                assert columnCount == 17
                assert columns["n_reads_single"][0] == seqs_in.size()
                assert columns["n_reads_single"][0] == columns["n_read_pairs"][0] * 2
                assert Math.abs(columns["mean_seq_len"][0] - (n_bases / seqs_in.size())) < 0.001
                def n_bases_exp = Math.floor(columns["n_reads_single"][0] * columns["mean_seq_len"][0] / 100) * 100
                assert columns["n_bases_approx"][0] == n_bases_exp
                assert columns["stage"][0] == "test"
            }
            def stage = tsv_basic.columns["stage"][0]
            def sample = tsv_basic.columns["sample"][0]
            // Other TSVs should have expected structure and content
            def tsv_adapt = path(workflow.out.qc[0][1]).csv(sep: "\t", decompress: true)
            with (tsv_adapt) {
                assert columnCount == 6
                assert columns["stage"][0] == stage
                assert columns["sample"][0] == sample
            }
            def tsv_qbase = path(workflow.out.qc[0][2]).csv(sep: "\t", decompress: true)
            with (tsv_qbase) {
                assert columnCount == 5
                assert columns["stage"][0] == stage
                assert columns["sample"][0] == sample
            }
            def tsv_qseqs = path(workflow.out.qc[0][3]).csv(sep: "\t", decompress: true)
            with (tsv_qseqs) {
                assert columnCount == 5
                assert columns["stage"][0] == stage
                assert columns["sample"][0] == sample
            }
            def tsv_lengths = path(workflow.out.qc[0][4]).csv(sep: "\t", decompress: true)
            with (tsv_qseqs) {
                assert columnCount == 5
                assert columns["stage"][0] == stage
                assert columns["sample"][0] == sample
            }
        }
    }

    test("Should run without failures on single-end data") {
        config "tests/configs/run_dev_se.config"
        tag "expect_success"
        tag "single_end"
        setup {
            run("LOAD_SAMPLESHEET") {
                script "subworkflows/local/loadSampleSheet/main.nf"
                workflow {
                    '''
                    input[0] = "${projectDir}/test-data/single-end-samplesheet.csv"
                    '''
                }
            }
            run("COPY_FILE") {
                script "modules/local/copyFile/main.nf"
                process {
                    '''
                    input[0] = LOAD_SAMPLESHEET.out.samplesheet
                    input[1] = "reads.fastq.gz"
                    '''
                }
            }
        }
        when {
            params {}
            workflow {
                """
                input[0] = COPY_FILE.out
                input[1] = "1"
                input[2] = "1 GB"
                input[3] = "test"
                input[4] = LOAD_SAMPLESHEET.out.single_end
                """
            }
        }
        then {
            // Should run without failures
            assert workflow.success
            // Basic stats TSV should have expected structure and content
            def tsv_basic  = path(workflow.out.qc[0][0]).csv(sep: "\t", decompress: true)
            def fastq_in = path(workflow.out.test_input[0][1]).fastq
            def seqs_in = fastq_in.sequences
            def n_bases = seqs_in.collect{ it.length() }.sum()
            with (tsv_basic) {
                assert rowCount == 1
                assert columnCount == 17
                assert columns["n_reads_single"][0] == seqs_in.size()
                assert Math.abs(columns["mean_seq_len"][0] - (n_bases / seqs_in.size())) < 0.001
                def n_bases_exp = Math.floor(columns["n_reads_single"][0] * columns["mean_seq_len"][0] / 100) * 100
                assert columns["n_bases_approx"][0] == n_bases_exp
                assert columns["n_read_pairs"][0] == ""
                assert columns["stage"][0] == "test"
            }
            def stage = tsv_basic.columns["stage"][0]
            def sample = tsv_basic.columns["sample"][0]
            // Other TSVs should have expected structure and content
            def tsv_adapt = path(workflow.out.qc[0][1]).csv(sep: "\t", decompress: true)
            with (tsv_adapt) {
                assert columnCount == 6
                assert columns["stage"][0] == stage
                assert columns["sample"][0] == sample
            }
            def tsv_qbase = path(workflow.out.qc[0][2]).csv(sep: "\t", decompress: true)
            with (tsv_qbase) {
                assert columnCount == 5
                assert columns["stage"][0] == stage
                assert columns["sample"][0] == sample
            }
            def tsv_qseqs = path(workflow.out.qc[0][3]).csv(sep: "\t", decompress: true)
            with (tsv_qseqs) {
                assert columnCount == 5
                assert columns["stage"][0] == stage
                assert columns["sample"][0] == sample
            }
            def tsv_lengths = path(workflow.out.qc[0][4]).csv(sep: "\t", decompress: true)
            with (tsv_qseqs) {
                assert columnCount == 5
                assert columns["stage"][0] == stage
                assert columns["sample"][0] == sample
            }
        }
    }

}
