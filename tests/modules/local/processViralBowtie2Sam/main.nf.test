nextflow_process {

    name "Test process PROCESS_VIRAL_BOWTIE2_SAM"
    script "modules/local/processViralBowtie2Sam/main.nf"
    process "PROCESS_VIRAL_BOWTIE2_SAM"

    test("On paired data, should run without errors and preserve lines") {
        config "tests/run.config"
        setup {
            run("LOAD_SAMPLESHEET") {
                script "subworkflows/local/loadSampleSheet/main.nf"
                process {
                    '''
                    input[0] = "test-data/samplesheet.csv"
                    '''
                }
            }
            run("INTERLEAVE_FASTQ_SEQTK") {
                script "modules/local/interleaveFastq/main.nf"
                process {
                    '''
                    input[0] = LOAD_SAMPLESHEET.out.samplesheet
                    '''
                }
            }
            run("BOWTIE2_STREAMED") {
                script "modules/local/bowtie2/main.nf"
                process {
                    '''
                    input[0] = INTERLEAVE_FASTQ_SEQTK.out
                    input[1] = "${params.ref_dir}/results/bt2-virus-index"
                    input[2] = "--score-min G,1,1"
                    input[3] = "virus"
                    input[4] = true
                    input[5] = true
                    '''
                }
            }
        }
        when {
            params {}
            process {
                '''
                input[0] = BOWTIE2_STREAMED.out.sam
                input[1] = "${params.ref_dir}/results/virus-genome-metadata-gid.tsv.gz"
                input[2] = "${params.ref_dir}/results/total-virus-db-annotated.tsv.gz"
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output lines should match input lines (plus TSV header, minus SAM headers)
            // Output lines should match input lines (plus header)
            def countGzipLines = { file -> path(file).linesGzip.size() }
            def countGzipLinesSam = { file -> ["bash", "-c", "zcat " + file + " | grep -v \"^@\" | wc -l"].execute().text.trim() as Integer }
            def output_lines = countGzipLines(process.out.output[0][1])
            def input_lines = countGzipLinesSam(process.out.input[0][1])
            assert output_lines == input_lines / 2 + 1
        }
    }
}
