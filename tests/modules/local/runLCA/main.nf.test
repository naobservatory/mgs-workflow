nextflow_process {

    name "Test Process RUN_LCA"
    script "modules/local/runLCA/main.nf"
    process "RUN_LCA"
    tag "run_lca"

    test("Should run without failures") {
        config "tests/configs/run.config"
        when {
            process {
                """
                input[0] = file("${projectDir}/test-data/toy-data/test-tax-node-dmp.txt")
                input[1] = file("${projectDir}/test-data/toy-data/test-blast-output.txt")
                input[2] = "seq_id"
                input[3] = "taxid"
                input[4] = "lca_output.txt"
                """
            }
        }

        then {
            // Additionally, assert process success to catch any other issues
            assert process.success

            // Load expected output from the solution file
            def expectedOutput = path("${projectDir}/test-data/toy-data/test-lca-solution.txt").csv(sep: "\t", header: false)

            // Load actual output generated by the `runLCA` process
            def actualOutput = path(process.out.output[0]).csv(sep: "\t", header: false)

            // Check that there are the same number of rows
            assert expectedOutput.rowCount == actualOutput.rowCount
       }

    }

    test("Should fail if taxid is not found in tax-node-dmp") {
            config "tests/configs/run.config"
            when {
                process {
                    """
                    input[0] = file("${projectDir}/test-data/toy-data/test-tax-node-dmp.txt")
                    input[1] = file("${projectDir}/test-data/toy-data/test-blast-invalid-taxid.txt")
                    input[2] = "seq_id"
                    input[3] = "taxid"
                    input[4] = "lca_output.txt"
                    """
                }
            }

            then {
                // Additionally, assert process success to catch any other issues
                assert process.failed
           }

    }

}
