def countGzipLines = { file -> path(file).linesGzip.size() }
def getGzipHeader = { file -> ["bash", "-c", "zcat " + file + " | head -n 1"].execute().text.trim() }
def getGzipBody = { file -> ["bash", "-c", "zcat " + file + " | tail -n +2"].execute().text.trim() }

nextflow_process {

    name "Test process REHEAD_TSV"
    script "modules/local/reheadTsv/main.nf"
    process "REHEAD_TSV"
    config "tests/run.config"

    test("Should produce no change when old and new headers match"){
        when {
            params {}
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of("${projectDir}/test-data/test_tab_sorted.tsv.gz"))
                input[1] = "x"
                input[2] = "x"
                input[3] = "test"
                '''
            }
            then {
                // Should run without failures
                assert process.success
                // Output should match input
                assert path(process.out.output[0][1]).md5 == path(process.out.input[0][1]).md5
            }
        }
    }

    test("Should successfully change the header when old and new fields differ"){
        when {
            params {}
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of("${projectDir}/test-data/test_tab_sorted.tsv.gz"))
                input[1] = "x"
                input[2] = "test"
                input[3] = "test"
                '''
            }
            then {
                // Should run without failures
                assert process.success
                // Output should differ from input
                def tab_in = process.out.input[0][1]
                def tab_out = process.out.output[0][1]
                assert path(tab_in).md5 != path(tab_out).md5
                // Line counts should match
                def lines_out = countGzipLines(tab_out)
                def lines_in = countGzipLines(tab_in)
                assert lines_out == lines_in
                // Output header should match input except for intended substitution
                def header_in = getGzipHeader(tab_in)
                def header_out = getGzipHeader(tab_out)
                assert header_out == header_in.replace("x", "test")
                // Rest of file should be unmodified
                def body_in = getGzipBody(tab_in)
                def body_out = getGzipBody(tab_out)
                assert body_in == body_out
            }
        }
    }

    test("Should fail with an appropriate error code if the field to modify is not present."){
        when {
            params {}
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of("${projectDir}/test-data/test_tab_sorted.tsv.gz"))
                input[1] = "a" // Not in header
                input[2] = "test"
                input[3] = "test"
                '''
            }
            then {
                // Should run without failures
                assert process.failed
                assert process.exitStatus == 1
            }
        }
    }

}
