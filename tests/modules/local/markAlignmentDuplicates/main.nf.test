nextflow_process {

    name "Test process MARK_ALIGNMENT_DUPLICATES"
    script "modules/local/markAlignmentDuplicates/main.nf"
    process "MARK_ALIGNMENT_DUPLICATES"
    config "tests/configs/downstream.config"
    tag "module"
    tag "mark_alignment_duplicates"

    // FAILURE TESTS //

    test("Should break when passed an empty input TSV") {
        tag "expect_failed"
        when {
            params {
                deviation = 0
                tsv = "${projectDir}/test-data/toy-data/empty_file.txt"
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.tsv))
                input[1] = params.deviation
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("Empty input file")
            assert !process.errorReport.contains("Missing required header")
            assert !process.errorReport.contains("Incorrect field count in line")
            assert !process.errorReport.contains("Deviation must be an integer")
            assert !process.errorReport.contains("Deviation must be at most 2")
        }
    }

    test("Should break when passed an invalid line (inappropriate field count)") {
        tag "expect_failed"
        when {
            params {
                deviation = 0
                tsv = "${projectDir}/test-data/toy-data/test-virus-hits-invalid-line.tsv"
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.tsv))
                input[1] = params.deviation
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert !process.errorReport.contains("Empty input file")
            assert !process.errorReport.contains("Missing required header")
            assert process.errorReport.contains("Incorrect field count in line")
            assert !process.errorReport.contains("Deviation must be an integer")
            assert !process.errorReport.contains("Deviation must be at most 2")
        }
    }

    test("Should break when passed an invalid header (missing required column)") {
        tag "expect_failed"
        when {
            params {
                deviation = 0
                tsv = "${projectDir}/test-data/toy-data/test-virus-hits-invalid-header.tsv"
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.tsv))
                input[1] = params.deviation
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert !process.errorReport.contains("Empty input file")
            assert process.errorReport.contains("Missing required header")
            assert !process.errorReport.contains("Incorrect field count in line")
            assert !process.errorReport.contains("Deviation must be an integer")
            assert !process.errorReport.contains("Deviation must be at most 2")
        }
    }

    test("Should break when passed an invalid deviation (not an integer)") {
        tag "expect_failed"
        when {
            params {
                deviation = "test"
                tsv = "${projectDir}/test-data/toy-data/test-virus-hits-valid.tsv"
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.tsv))
                input[1] = params.deviation
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert !process.errorReport.contains("Empty input file")
            assert !process.errorReport.contains("Missing required header")
            assert !process.errorReport.contains("Incorrect field count in line")
            assert process.errorReport.contains("Deviation must be an integer")
            assert !process.errorReport.contains("Deviation must be at most 2")
        }
    }

    test("Should break when passed an invalid deviation (too big)") {
        tag "expect_failed"
        when {
            params {
                deviation = 100
                tsv = "${projectDir}/test-data/toy-data/test-virus-hits-valid.tsv"
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.tsv))
                input[1] = params.deviation
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert !process.errorReport.contains("Empty input file")
            assert !process.errorReport.contains("Missing required header")
            assert !process.errorReport.contains("Incorrect field count in line")
            assert !process.errorReport.contains("Deviation must be an integer")
            assert process.errorReport.contains("Deviation must be at most 2")
        }
    }

    // SUCCESS TESTS //

    test("Should run without errors on real input (plaintext)") {
        tag "expect_success"
        when {
            params {
                deviation = 1
                tsv = "${projectDir}/test-data/gold-standard-results/virus_hits_filtered.tsv"
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.tsv))
                input[1] = params.deviation
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Output should have expected dimensions
            def tab_in = path(process.out.input[0][1]).csv(sep: "\t")
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            def tab_meta = path(process.out.output[0][2]).csv(sep: "\t", decompress: true)
            assert tab_out.rowCount == tab_in.rowCount
            assert tab_out.columnCount == tab_in.columnCount + 1
            // Output should have expected headers
            assert tab_out.columnNames == tab_in.columnNames + ["bowtie2_dup_exemplar"]
            assert tab_meta.columnNames == ["bowtie2_genome_id_all", "bowtie2_dup_exemplar", "bowtie2_dup_count", "bowtie2_dup_pairwise_match_frac"]
            // Output should contain expected sequence IDs
            assert tab_in.columns["seq_id"].toSorted() == tab_out.columns["seq_id"].toSorted()
            def line_mapping = tab_out.columns["seq_id"].collect{ element -> tab_in.columns["seq_id"].indexOf(element) }
            // Old columns should be unchanged
            for (c in tab_in.columnNames) {
                assert tab_out.columns[c] == line_mapping.collect{ idx -> tab_in.columns[c][idx] }
            }
            // Output stats should be consistent (not checking correctness here)
            for (r in tab_meta.rows) {
                def exemplar = r["bowtie2_dup_exemplar"]
                assert exemplar in tab_out.columns["seq_id"] // Exemplar should be a real read
                assert r["bowtie2_dup_count"] == tab_out.columns["bowtie2_dup_exemplar"].count(exemplar) // Dup counts should match exemplar assignments
            }
            assert tab_meta.columns["bowtie2_dup_count"].sum() == tab_out.rowCount
        }
    }

    test("Should run without errors on real input (compressed)") {
        tag "expect_success"
        setup {
            run("GZIP_FILE") {
                script "modules/local/gzipFile/main.nf"
                process {
                    '''
                    input[0] = Channel.of("test")
                        | combine(Channel.of("${projectDir}/test-data/gold-standard-results/virus_hits_filtered.tsv"))
                    '''
                }
            }
        }
        when {
            params {
                deviation = 1
            }
            process {
                '''
                input[0] = GZIP_FILE.out
                input[1] = params.deviation
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Output should have expected dimensions
            def tab_in = path(process.out.input[0][1]).csv(sep: "\t", decompress: true)
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            def tab_meta = path(process.out.output[0][2]).csv(sep: "\t", decompress: true)
            assert tab_out.rowCount == tab_in.rowCount
            assert tab_out.columnCount == tab_in.columnCount + 1
            // Output should have expected headers
            assert tab_out.columnNames == tab_in.columnNames + ["bowtie2_dup_exemplar"]
            assert tab_meta.columnNames == ["bowtie2_genome_id_all", "bowtie2_dup_exemplar", "bowtie2_dup_count", "bowtie2_dup_pairwise_match_frac"]
            // Output should contain expected sequence IDs
            assert tab_in.columns["seq_id"].toSorted() == tab_out.columns["seq_id"].toSorted()
            def line_mapping = tab_out.columns["seq_id"].collect{ element -> tab_in.columns["seq_id"].indexOf(element) }
            // Old columns should be unchanged
            for (c in tab_in.columnNames) {
                assert tab_out.columns[c] == line_mapping.collect{ idx -> tab_in.columns[c][idx] }
            }
            // Output stats should be consistent (not checking correctness here)
            for (r in tab_meta.rows) {
                def exemplar = r["bowtie2_dup_exemplar"]
                assert exemplar in tab_out.columns["seq_id"] // Exemplar should be a real read
                assert r["bowtie2_dup_count"] == tab_out.columns["bowtie2_dup_exemplar"].count(exemplar) // Dup counts should match exemplar assignments
            }
            assert tab_meta.columns["bowtie2_dup_count"].sum() == tab_out.rowCount
        }
    }

    test("Should produce correct output on controlled toy data (max deviation 1, no chains)") {
        tag "expect_success"
        tag "deep_test"
        when {
            params {
                tsv = "${projectDir}/test-data/toy-data/test-virus-hits-valid-nochains.tsv"
                deviation = 1
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.tsv))
                input[1] = params.deviation
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Output should have expected dimensions
            def tab_in = path(process.out.input[0][1]).csv(sep: "\t")
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            def tab_meta = path(process.out.output[0][2]).csv(sep: "\t", decompress: true)
            assert tab_out.rowCount == tab_in.rowCount
            assert tab_out.columnCount == tab_in.columnCount + 1
            // Output should have expected headers
            assert tab_out.columnNames == tab_in.columnNames + ["bowtie2_dup_exemplar"]
            assert tab_meta.columnNames == ["bowtie2_genome_id_all", "bowtie2_dup_exemplar", "bowtie2_dup_count", "bowtie2_dup_pairwise_match_frac"]
            // Output should contain expected sequence IDs
            assert tab_in.columns["seq_id"].toSorted() == tab_out.columns["seq_id"].toSorted()
            def line_mapping = tab_out.columns["seq_id"].collect{ element -> tab_in.columns["seq_id"].indexOf(element) }
            // Old columns should be unchanged
            for (c in tab_in.columnNames) {
                assert tab_out.columns[c] == line_mapping.collect{ idx -> tab_in.columns[c][idx] }
            }
            // Output stats should be consistent (not checking correctness yet)
            for (r in tab_meta.rows) {
                def exemplar = r["bowtie2_dup_exemplar"]
                assert exemplar in tab_out.columns["seq_id"] // Exemplar should be a real read
                assert r["bowtie2_dup_count"] == tab_out.columns["bowtie2_dup_exemplar"].count(exemplar) // Dup counts should match exemplar assignments
                assert r["bowtie2_dup_pairwise_match_frac"] == 1 // Verify no chains
            }
            assert tab_meta.columns["bowtie2_dup_count"].sum() == tab_out.rowCount
            // Each sequence should be assigned to the expected exemplar for the specified deviation
            def col_exp = "exemplar_exp_" + params.deviation.toString()
            for (r in tab_out.rows) {
                assert r["bowtie2_dup_exemplar"] == r[col_exp]
            }
        }
    }

    test("Should produce correct output on controlled toy data (max deviation 0, no chains)") {
        tag "expect_success"
        tag "deep_test"
        when {
            params {
                tsv = "${projectDir}/test-data/toy-data/test-virus-hits-valid-nochains.tsv"
                deviation = 0
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.tsv))
                input[1] = params.deviation
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Output should have expected dimensions
            def tab_in = path(process.out.input[0][1]).csv(sep: "\t")
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            def tab_meta = path(process.out.output[0][2]).csv(sep: "\t", decompress: true)
            assert tab_out.rowCount == tab_in.rowCount
            assert tab_out.columnCount == tab_in.columnCount + 1
            // Output should have expected headers
            assert tab_out.columnNames == tab_in.columnNames + ["bowtie2_dup_exemplar"]
            assert tab_meta.columnNames == ["bowtie2_genome_id_all", "bowtie2_dup_exemplar", "bowtie2_dup_count", "bowtie2_dup_pairwise_match_frac"]
            // Output should contain expected sequence IDs
            assert tab_in.columns["seq_id"].toSorted() == tab_out.columns["seq_id"].toSorted()
            def line_mapping = tab_out.columns["seq_id"].collect{ element -> tab_in.columns["seq_id"].indexOf(element) }
            // Old columns should be unchanged
            for (c in tab_in.columnNames) {
                assert tab_out.columns[c] == line_mapping.collect{ idx -> tab_in.columns[c][idx] }
            }
            // Output stats should be consistent (not checking correctness yet)
            for (r in tab_meta.rows) {
                def exemplar = r["bowtie2_dup_exemplar"]
                assert exemplar in tab_out.columns["seq_id"] // Exemplar should be a real read
                assert r["bowtie2_dup_count"] == tab_out.columns["bowtie2_dup_exemplar"].count(exemplar) // Dup counts should match exemplar assignments
                assert r["bowtie2_dup_pairwise_match_frac"] == 1 // Verify no chains
            }
            assert tab_meta.columns["bowtie2_dup_count"].sum() == tab_out.rowCount
            // Each sequence should be assigned to the expected exemplar for the specified deviation
            def col_exp = "exemplar_exp_" + params.deviation.toString()
            for (r in tab_out.rows) {
                assert r["bowtie2_dup_exemplar"] == r[col_exp]
            }
        }
    }

    test("Should produce correct output on controlled toy data (max deviation 2, no chains)") {
        tag "expect_success"
        tag "deep_test"
        when {
            params {
                tsv = "${projectDir}/test-data/toy-data/test-virus-hits-valid-nochains.tsv"
                deviation = 2
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.tsv))
                input[1] = params.deviation
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Output should have expected dimensions
            def tab_in = path(process.out.input[0][1]).csv(sep: "\t")
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            def tab_meta = path(process.out.output[0][2]).csv(sep: "\t", decompress: true)
            assert tab_out.rowCount == tab_in.rowCount
            assert tab_out.columnCount == tab_in.columnCount + 1
            // Output should have expected headers
            assert tab_out.columnNames == tab_in.columnNames + ["bowtie2_dup_exemplar"]
            assert tab_meta.columnNames == ["bowtie2_genome_id_all", "bowtie2_dup_exemplar", "bowtie2_dup_count", "bowtie2_dup_pairwise_match_frac"]
            // Output should contain expected sequence IDs
            assert tab_in.columns["seq_id"].toSorted() == tab_out.columns["seq_id"].toSorted()
            def line_mapping = tab_out.columns["seq_id"].collect{ element -> tab_in.columns["seq_id"].indexOf(element) }
            // Old columns should be unchanged
            for (c in tab_in.columnNames) {
                assert tab_out.columns[c] == line_mapping.collect{ idx -> tab_in.columns[c][idx] }
            }
            // Output stats should be consistent (not checking correctness yet)
            for (r in tab_meta.rows) {
                def exemplar = r["bowtie2_dup_exemplar"]
                assert exemplar in tab_out.columns["seq_id"] // Exemplar should be a real read
                assert r["bowtie2_dup_count"] == tab_out.columns["bowtie2_dup_exemplar"].count(exemplar) // Dup counts should match exemplar assignments
                assert r["bowtie2_dup_pairwise_match_frac"] == 1 // Verify no chains
            }
            assert tab_meta.columns["bowtie2_dup_count"].sum() == tab_out.rowCount
            // Each sequence should be assigned to the expected exemplar for the specified deviation
            def col_exp = "exemplar_exp_" + params.deviation.toString()
            for (r in tab_out.rows) {
                assert r["bowtie2_dup_exemplar"] == r[col_exp]
            }
        }
    }

    test("Should produce correct output on controlled toy data (max deviation 1, with chains)") {
        tag "expect_success"
        tag "deep_test"
        tag "chain_test"
        when {
            params {
                tsv = "${projectDir}/test-data/toy-data/test-virus-hits-valid-chains.tsv"
                deviation = 1
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.tsv))
                input[1] = params.deviation
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Output should have expected dimensions
            def tab_in = path(process.out.input[0][1]).csv(sep: "\t")
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            def tab_meta = path(process.out.output[0][2]).csv(sep: "\t", decompress: true)
            assert tab_out.rowCount == tab_in.rowCount
            assert tab_out.columnCount == tab_in.columnCount + 1
            // Output should have expected headers
            assert tab_out.columnNames == tab_in.columnNames + ["bowtie2_dup_exemplar"]
            assert tab_meta.columnNames == ["bowtie2_genome_id_all", "bowtie2_dup_exemplar", "bowtie2_dup_count", "bowtie2_dup_pairwise_match_frac"]
            // Output should contain expected sequence IDs
            assert tab_in.columns["seq_id"].toSorted() == tab_out.columns["seq_id"].toSorted()
            def line_mapping = tab_out.columns["seq_id"].collect{ element -> tab_in.columns["seq_id"].indexOf(element) }
            // Old columns should be unchanged
            for (c in tab_in.columnNames) {
                assert tab_out.columns[c] == line_mapping.collect{ idx -> tab_in.columns[c][idx] }
            }
            // Output stats should be consistent (not checking correctness yet)
            def col_exp_pairs = "pairwise_exp_" + params.deviation.toString()
            for (r in tab_meta.rows) {
                def exemplar = r["bowtie2_dup_exemplar"]
                def dup_count = r["bowtie2_dup_count"]
                assert exemplar in tab_out.columns["seq_id"] // Exemplar should be a real read
                assert dup_count == tab_out.columns["bowtie2_dup_exemplar"].count(exemplar) // Dup counts should match exemplar assignments
                if (dup_count > 1) {
                    def exp_pair_num = csv(tab_out.table.where(
                        tab_out.table.stringColumn("bowtie2_dup_exemplar").isEqualTo(exemplar))).columns[col_exp_pairs].sum()
                    def exp_pair_frac = exp_pair_num * 2 / (dup_count * (dup_count - 1))
                    assert Math.abs(r["bowtie2_dup_pairwise_match_frac"] - exp_pair_frac) < 1e-9
                } else {
                    assert r["bowtie2_dup_pairwise_match_frac"] == 1
                }
            }
            assert tab_meta.columns["bowtie2_dup_count"].sum() == tab_out.rowCount
            // Each sequence should be assigned to the expected exemplar for the specified deviation
            def col_exp = "exemplar_exp_" + params.deviation.toString()
            for (r in tab_out.rows) {
                assert r["bowtie2_dup_exemplar"] == r[col_exp]
            }
        }
    }

    test("Should produce correct output on controlled toy data (max deviation 0, with chains)") {
        tag "expect_success"
        tag "deep_test"
        tag "chain_test"
        when {
            params {
                tsv = "${projectDir}/test-data/toy-data/test-virus-hits-valid-chains.tsv"
                deviation = 0
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.tsv))
                input[1] = params.deviation
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Output should have expected dimensions
            def tab_in = path(process.out.input[0][1]).csv(sep: "\t")
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            def tab_meta = path(process.out.output[0][2]).csv(sep: "\t", decompress: true)
            assert tab_out.rowCount == tab_in.rowCount
            assert tab_out.columnCount == tab_in.columnCount + 1
            // Output should have expected headers
            assert tab_out.columnNames == tab_in.columnNames + ["bowtie2_dup_exemplar"]
            assert tab_meta.columnNames == ["bowtie2_genome_id_all", "bowtie2_dup_exemplar", "bowtie2_dup_count", "bowtie2_dup_pairwise_match_frac"]
            // Output should contain expected sequence IDs
            assert tab_in.columns["seq_id"].toSorted() == tab_out.columns["seq_id"].toSorted()
            def line_mapping = tab_out.columns["seq_id"].collect{ element -> tab_in.columns["seq_id"].indexOf(element) }
            // Old columns should be unchanged
            for (c in tab_in.columnNames) {
                assert tab_out.columns[c] == line_mapping.collect{ idx -> tab_in.columns[c][idx] }
            }
            // Output stats should be consistent (not checking correctness yet)
            def col_exp_pairs = "pairwise_exp_" + params.deviation.toString()
            for (r in tab_meta.rows) {
                def exemplar = r["bowtie2_dup_exemplar"]
                def dup_count = r["bowtie2_dup_count"]
                assert exemplar in tab_out.columns["seq_id"] // Exemplar should be a real read
                assert dup_count == tab_out.columns["bowtie2_dup_exemplar"].count(exemplar) // Dup counts should match exemplar assignments
                if (dup_count > 1) {
                    def exp_pair_num = csv(tab_out.table.where(
                        tab_out.table.stringColumn("bowtie2_dup_exemplar").isEqualTo(exemplar))).columns[col_exp_pairs].sum()
                    def exp_pair_frac = exp_pair_num * 2 / (dup_count * (dup_count - 1))
                    assert Math.abs(r["bowtie2_dup_pairwise_match_frac"] - exp_pair_frac) < 1e-9
                } else {
                    assert r["bowtie2_dup_pairwise_match_frac"] == 1
                }
            }
            assert tab_meta.columns["bowtie2_dup_count"].sum() == tab_out.rowCount
            // Each sequence should be assigned to the expected exemplar for the specified deviation
            def col_exp = "exemplar_exp_" + params.deviation.toString()
            for (r in tab_out.rows) {
                assert r["bowtie2_dup_exemplar"] == r[col_exp]
            }
        }
    }

    test("Should produce correct output on controlled toy data (max deviation 2, with chains)") {
        tag "expect_success"
        tag "deep_test"
        tag "chain_test"
        when {
            params {
                tsv = "${projectDir}/test-data/toy-data/test-virus-hits-valid-chains.tsv"
                deviation = 2
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.tsv))
                input[1] = params.deviation
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Output should have expected dimensions
            def tab_in = path(process.out.input[0][1]).csv(sep: "\t")
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            def tab_meta = path(process.out.output[0][2]).csv(sep: "\t", decompress: true)
            assert tab_out.rowCount == tab_in.rowCount
            assert tab_out.columnCount == tab_in.columnCount + 1
            // Output should have expected headers
            assert tab_out.columnNames == tab_in.columnNames + ["bowtie2_dup_exemplar"]
            assert tab_meta.columnNames == ["bowtie2_genome_id_all", "bowtie2_dup_exemplar", "bowtie2_dup_count", "bowtie2_dup_pairwise_match_frac"]
            // Output should contain expected sequence IDs
            assert tab_in.columns["seq_id"].toSorted() == tab_out.columns["seq_id"].toSorted()
            def line_mapping = tab_out.columns["seq_id"].collect{ element -> tab_in.columns["seq_id"].indexOf(element) }
            // Old columns should be unchanged
            for (c in tab_in.columnNames) {
                assert tab_out.columns[c] == line_mapping.collect{ idx -> tab_in.columns[c][idx] }
            }
            // Output stats should be consistent (not checking correctness yet)
            def col_exp_pairs = "pairwise_exp_" + params.deviation.toString()
            for (r in tab_meta.rows) {
                def exemplar = r["bowtie2_dup_exemplar"]
                def dup_count = r["bowtie2_dup_count"]
                assert exemplar in tab_out.columns["seq_id"] // Exemplar should be a real read
                assert dup_count == tab_out.columns["bowtie2_dup_exemplar"].count(exemplar) // Dup counts should match exemplar assignments
                if (dup_count > 1) {
                    def exp_pair_num = csv(tab_out.table.where(
                        tab_out.table.stringColumn("bowtie2_dup_exemplar").isEqualTo(exemplar))).columns[col_exp_pairs].sum()
                    def exp_pair_frac = exp_pair_num * 2 / (dup_count * (dup_count - 1))
                    assert Math.abs(r["bowtie2_dup_pairwise_match_frac"] - exp_pair_frac) < 1e-9
                } else {
                    assert r["bowtie2_dup_pairwise_match_frac"] == 1
                }
            }
            assert tab_meta.columns["bowtie2_dup_count"].sum() == tab_out.rowCount
            // Each sequence should be assigned to the expected exemplar for the specified deviation
            def col_exp = "exemplar_exp_" + params.deviation.toString()
            for (r in tab_out.rows) {
                assert r["bowtie2_dup_exemplar"] == r[col_exp]
            }
        }
    }

    test("Should produce correct output on controlled toy data (max deviation 1, split genome ID)") {
        tag "expect_success"
        tag "deep_test"
        tag "split_test"
        when {
            params {
                tsv = "${projectDir}/test-data/toy-data/test-virus-hits-valid-split.tsv"
                deviation = 1
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.tsv))
                input[1] = params.deviation
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Output should have expected dimensions
            def tab_in = path(process.out.input[0][1]).csv(sep: "\t")
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            def tab_meta = path(process.out.output[0][2]).csv(sep: "\t", decompress: true)
            assert tab_out.rowCount == tab_in.rowCount
            assert tab_out.columnCount == tab_in.columnCount + 1
            // Output should have expected headers
            assert tab_out.columnNames == tab_in.columnNames + ["bowtie2_dup_exemplar"]
            assert tab_meta.columnNames == ["bowtie2_genome_id_all", "bowtie2_dup_exemplar", "bowtie2_dup_count", "bowtie2_dup_pairwise_match_frac"]
            // Output should contain expected sequence IDs
            assert tab_in.columns["seq_id"].toSorted() == tab_out.columns["seq_id"].toSorted()
            def line_mapping = tab_out.columns["seq_id"].collect{ element -> tab_in.columns["seq_id"].indexOf(element) }
            // Old columns should be unchanged
            for (c in tab_in.columnNames) {
                assert tab_out.columns[c] == line_mapping.collect{ idx -> tab_in.columns[c][idx] }
            }
            // Output stats should be consistent (not checking correctness yet)
            for (r in tab_meta.rows) {
                def exemplar = r["bowtie2_dup_exemplar"]
                assert exemplar in tab_out.columns["seq_id"] // Exemplar should be a real read
                assert r["bowtie2_dup_count"] == tab_out.columns["bowtie2_dup_exemplar"].count(exemplar) // Dup counts should match exemplar assignments
            }
            assert tab_meta.columns["bowtie2_dup_count"].sum() == tab_out.rowCount
            // Each sequence should be assigned to the expected exemplar for the specified deviation
            def col_exp = "exemplar_exp_" + params.deviation.toString()
            for (r in tab_out.rows) {
                assert r["bowtie2_dup_exemplar"] == r[col_exp]
            }
        }
    }

    test("Should produce correct output on controlled toy data (max deviation 0, split genome ID)") {
        tag "expect_success"
        tag "deep_test"
        tag "split_test"
        when {
            params {
                tsv = "${projectDir}/test-data/toy-data/test-virus-hits-valid-split.tsv"
                deviation = 0
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.tsv))
                input[1] = params.deviation
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Output should have expected dimensions
            def tab_in = path(process.out.input[0][1]).csv(sep: "\t")
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            def tab_meta = path(process.out.output[0][2]).csv(sep: "\t", decompress: true)
            assert tab_out.rowCount == tab_in.rowCount
            assert tab_out.columnCount == tab_in.columnCount + 1
            // Output should have expected headers
            assert tab_out.columnNames == tab_in.columnNames + ["bowtie2_dup_exemplar"]
            assert tab_meta.columnNames == ["bowtie2_genome_id_all", "bowtie2_dup_exemplar", "bowtie2_dup_count", "bowtie2_dup_pairwise_match_frac"]
            // Output should contain expected sequence IDs
            assert tab_in.columns["seq_id"].toSorted() == tab_out.columns["seq_id"].toSorted()
            def line_mapping = tab_out.columns["seq_id"].collect{ element -> tab_in.columns["seq_id"].indexOf(element) }
            // Old columns should be unchanged
            for (c in tab_in.columnNames) {
                assert tab_out.columns[c] == line_mapping.collect{ idx -> tab_in.columns[c][idx] }
            }
            // Output stats should be consistent (not checking correctness yet)
            for (r in tab_meta.rows) {
                def exemplar = r["bowtie2_dup_exemplar"]
                assert exemplar in tab_out.columns["seq_id"] // Exemplar should be a real read
                assert r["bowtie2_dup_count"] == tab_out.columns["bowtie2_dup_exemplar"].count(exemplar) // Dup counts should match exemplar assignments
            }
            assert tab_meta.columns["bowtie2_dup_count"].sum() == tab_out.rowCount
            // Each sequence should be assigned to the expected exemplar for the specified deviation
            def col_exp = "exemplar_exp_" + params.deviation.toString()
            for (r in tab_out.rows) {
                assert r["bowtie2_dup_exemplar"] == r[col_exp]
            }
        }
    }

    test("Should produce correct output on controlled toy data (max deviation 2, split genome ID)") {
        tag "expect_success"
        tag "deep_test"
        tag "split_test"
        when {
            params {
                tsv = "${projectDir}/test-data/toy-data/test-virus-hits-valid-split.tsv"
                deviation = 2
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.tsv))
                input[1] = params.deviation
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Output should have expected dimensions
            def tab_in = path(process.out.input[0][1]).csv(sep: "\t")
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            def tab_meta = path(process.out.output[0][2]).csv(sep: "\t", decompress: true)
            assert tab_out.rowCount == tab_in.rowCount
            assert tab_out.columnCount == tab_in.columnCount + 1
            // Output should have expected headers
            assert tab_out.columnNames == tab_in.columnNames + ["bowtie2_dup_exemplar"]
            assert tab_meta.columnNames == ["bowtie2_genome_id_all", "bowtie2_dup_exemplar", "bowtie2_dup_count", "bowtie2_dup_pairwise_match_frac"]
            // Output should contain expected sequence IDs
            assert tab_in.columns["seq_id"].toSorted() == tab_out.columns["seq_id"].toSorted()
            def line_mapping = tab_out.columns["seq_id"].collect{ element -> tab_in.columns["seq_id"].indexOf(element) }
            // Old columns should be unchanged
            for (c in tab_in.columnNames) {
                assert tab_out.columns[c] == line_mapping.collect{ idx -> tab_in.columns[c][idx] }
            }
            // Output stats should be consistent (not checking correctness yet)
            for (r in tab_meta.rows) {
                def exemplar = r["bowtie2_dup_exemplar"]
                assert exemplar in tab_out.columns["seq_id"] // Exemplar should be a real read
                assert r["bowtie2_dup_count"] == tab_out.columns["bowtie2_dup_exemplar"].count(exemplar) // Dup counts should match exemplar assignments
            }
            assert tab_meta.columns["bowtie2_dup_count"].sum() == tab_out.rowCount
            // Each sequence should be assigned to the expected exemplar for the specified deviation
            def col_exp = "exemplar_exp_" + params.deviation.toString()
            for (r in tab_out.rows) {
                assert r["bowtie2_dup_exemplar"] == r[col_exp]
            }
        }
    }

}
