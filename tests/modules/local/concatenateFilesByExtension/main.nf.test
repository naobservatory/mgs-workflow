nextflow_process {

    name "Test process CONCATENATE_FILES_BY_EXTENSION"
    script "modules/local/concatenateFilesByExtension/main.nf"
    process "CONCATENATE_FILES_BY_EXTENSION"
    config "tests/configs/run.config"
    tag "module"
    tag "concatenate_files_by_extension"

    setup {
        run("COPY_FILE_BARE", alias: "COPY_FASTA_1") {
            script "modules/local/copyFile/main.nf"
            process {
                """
                input[0] = "${projectDir}/test-data/toy-data/test-random.fasta"
                input[1] = "input_fasta_1.fasta"
                """
            }
        }
        run("COPY_FILE_BARE", alias: "COPY_FASTA_2") {
            script "modules/local/copyFile/main.nf"
            process {
                """
                input[0] = "${projectDir}/test-data/toy-data/test-random.fasta"
                input[1] = "input_fasta_2.fasta"
                """
            }
        }
        run("COPY_FILE_BARE", alias: "COPY_FASTQ_1") {
            script "modules/local/copyFile/main.nf"
            process {
                """
                input[0] = "${projectDir}/test-data/toy-data/test-random.fastq"
                input[1] = "input_fastq_1.fastq"
                """
            }
        }
    }

    /* FAILURE TESTS */

    test("Should fail when input file has no extension") {
        tag "expect_failed"
        when {
            params {
            }
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_no_extension"))
                input[1] = "test"
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport =~ /Input file .* has no extension --/
        }
    }

    test("Should fail when input files have different extensions") {
        tag "expect_failed"
        when {
            params {
            }
            process {
                '''
                input[0] = Channel.of("test").combine(COPY_FASTA_1.out)
                    | concat(Channel.of("test").combine(COPY_FASTQ_1.out))
                    | groupTuple()
                input[1] = "test"
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport =~ /Input files .* do not end with .fasta --/
        }
    }

    /* SINGLE-FILE TESTS */

    test("Given a single input file, should return an identical output file") {
        tag "expect_success"
        tag "single"
        when {
            params {
            }
            process {
                '''
                input[0] = Channel.of("test").combine(COPY_FASTA_1.out)
                input[1] = "single"
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output should be a FASTA file
            assert process.out.output[0][1].endsWith('.fasta')
            assert path(process.out.output[0][1]).getFileName().toString() == 'test_single.fasta'
            // Check file exactly matches using MD5
            assert path(process.out.input[0][1]).md5 == path(process.out.output[0][1]).md5
        }
    }

    /* DOUBLE-FILE TESTS */

    test("Given two input files with the same extension, should return a concatenated output file") {
        tag "expect_success"
        tag "double"
        when {
            params {
            }
            process {
                '''
                input[0] = Channel.of("test").combine(COPY_FASTA_1.out)
                    | concat(Channel.of("test").combine(COPY_FASTA_2.out))
                    | groupTuple()
                input[1] = "double"
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output should be a FASTA file
            assert process.out.output[0][1].endsWith('.fasta')
            assert path(process.out.output[0][1]).getFileName().toString() == 'test_double.fasta'
            // Check concatenation worked using fasta parsing
            def file_in = path(process.out.input[0][1]).text.split("\n")
            def file_out = path(process.out.output[0][1]).text.split("\n")
            assert file_out.size() == file_in.size() * 2
            assert file_out == file_in + file_in
        }
    }

}