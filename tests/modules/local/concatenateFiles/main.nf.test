nextflow_process {

    name "Test process CONCATENATE_FILES on gzipped FASTQ files"
    script "modules/local/concatenateFiles/main.nf"
    process "CONCATENATE_FILES"
    config "tests/configs/run.config"
    tag "module"
    tag "concatenate_files"

    setup {
        run("COPY_FILE_BARE", alias: "COPY_FILE_1") {
            script "modules/local/copyFile/main.nf"
            process {
                """
                input[0] = "${projectDir}/test-data/toy-data/test-random.fastq"
                input[1] = "input_1.fastq"
                """
            }
        }
        run("COPY_FILE_BARE", alias: "COPY_FILE_2") {
            script "modules/local/copyFile/main.nf"
            process {
                """
                input[0] = "${projectDir}/test-data/toy-data/test-random.fastq"
                input[1] = "input_2.fastq"
                """
            }
        }
        run("COPY_FILE_BARE", alias: "COPY_FILE_3") {
            script "modules/local/copyFile/main.nf"
            process {
                """
                input[0] = "${projectDir}/test-data/toy-data/test-random.fastq"
                input[1] = "input_3.fastq"
                """
            }
        }
    }

    test("Should run without failures on a single input file") {
        tag "expect_success"
        when {
            params {
            }
            process {
                '''
                input[0] = COPY_FILE_1.out
                input[1] = "test_single"
                input[2] = "fastq"
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output should match input exactly
            assert path(process.out.input[0]).md5 == path(process.out.output[0]).md5
        }
    }

    test("Should run without failures on two input TSVs") {
        tag "expect_success"
        when {
            params {
            }
            process {
                '''
                input[0] = COPY_FILE_1.out.combine(COPY_FILE_2.out)
                input[1] = "test_double"
                input[2] = "fastq"
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output should have double the entries of input
            def fastq_out = path(process.out.output[0]).fastq
            def fastq_in = path(process.out.input[0]).fastq
            def reads_in = fastq_in.getNumberOfRecords()
            assert fastq_out.getNumberOfRecords() == reads_in * 2
            // Read names should match input
            for (int i = 0; i < fastq_in.getNumberOfRecords(); i++){
                assert fastq_in.readNames[i] == fastq_out.readNames[i]
                assert fastq_in.readNames[i] == fastq_out.readNames[i+reads_in]
            }
        }
    }

    test("Should run without failures on three input TSVs") {
        tag "expect_success"
        when {
            params {
            }
            process {
                '''
                input[0] = COPY_FILE_1.out.combine(COPY_FILE_2.out).combine(COPY_FILE_3.out)
                input[1] = "test_triple"
                input[2] = "fastq"
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output should have triple the entries of input
            def fastq_out = path(process.out.output[0]).fastq
            def fastq_in = path(process.out.input[0]).fastq
            def reads_in = fastq_in.getNumberOfRecords()
            assert fastq_out.getNumberOfRecords() == reads_in * 3
            // Read names should match input
            for (int i = 0; i < fastq_in.getNumberOfRecords(); i++){
                assert fastq_in.readNames[i] == fastq_out.readNames[i]
                assert fastq_in.readNames[i] == fastq_out.readNames[i+reads_in]
                assert fastq_in.readNames[i] == fastq_out.readNames[i+reads_in*2]
            }
        }
    }

}
