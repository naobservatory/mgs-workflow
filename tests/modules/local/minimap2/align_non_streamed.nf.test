nextflow_process {
    name "Test process MINIMAP2_NON_STREAMED"
    script "modules/local/minimap2/main.nf"
    process "MINIMAP2_NON_STREAMED"
    config "tests/configs/run_ont.config"

    tag "module"
    tag "minimap2"

    setup {
        run("LOAD_SAMPLESHEET") {
            script "subworkflows/local/loadSampleSheet/main.nf"
            process {
                """
                input[0] = "${projectDir}/test-data/ont-samplesheet.csv"
                input[1] = "ont"
                input[2] = false
                """
            }
        }
    }

    test("When run against contaminant index, should correctly partition reads based on alignment status") {
        tag "expect_success"

        when {
            params {}
            process {
                '''
                params_map = [
                    suffix: "test",
                    remove_sq: false,
                    alignment_params: ""
                ]
                input[0] = LOAD_SAMPLESHEET.out.samplesheet
                input[1] = "${params.ref_dir}/results/mm2-other-index"
                input[2] = params_map
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success

            // Check all expected output files exist
            assert path(process.out.sam[0][1]).exists()
            assert path(process.out.reads_mapped[0][1]).exists()
            assert path(process.out.reads_unmapped[0][1]).exists()
            assert path(process.out.input[0][1]).exists()

            // Get read IDs from output FASTQ files
            def fastq_mapped = path(process.out.reads_mapped[0][1]).fastq
            def fastq_unmapped = path(process.out.reads_unmapped[0][1]).fastq
            def fastq_read_ids_mapped = fastq_mapped.readNames.toSet()
            def fastq_read_ids_unmapped = fastq_unmapped.readNames.toSet()

            // Get read IDs from SAM file
            def samlines = sam(process.out.sam[0][1]).getSamLines()
            def sam_read_ids_mapped = samlines
                .collect { line -> line.split('\t')[0] }  // Get read IDs
                .toSet()

            // Get input read IDs
            def input_reads = path(process.out.input[0][1]).fastq.readNames.toSet()

            // Verify read partitioning is correct
            assert sam_read_ids_mapped == fastq_read_ids_mapped

            // Verify no overlapping reads between mapped and unmapped sets
            assert fastq_read_ids_mapped.intersect(fastq_read_ids_unmapped).size() == 0

            // Verify input FASTQ contains all reads
            assert input_reads == fastq_read_ids_mapped + fastq_read_ids_unmapped
        }
    }

}
