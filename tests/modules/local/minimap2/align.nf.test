nextflow_process {
    name "Test process MINIMAP2"
    script "modules/local/minimap2/main.nf"
    process "MINIMAP2"
    config "tests/configs/run_ont.config"

    tag "module"
    tag "minimap2"

    setup {
        run("LOAD_SAMPLESHEET") {
            script "subworkflows/local/loadSampleSheet/main.nf"
            process {
                """
                input[0] = "${projectDir}/test-data/ont-samplesheet.csv"
                input[1] = "ont"
                input[2] = false
                """
            }
        }
    }

    test("When run against viral index, should correctly partition reads based on alignment status (when multiple alignments parameter is passed)") {
        tag "expect_success"

        when {
            params {
            }
            process {
                '''
                def minimap2_params = [
                    suffix: "test",
                    remove_sq: false,
                    alignment_params: "-N 10",
                    db_download_timeout: params.db_download_timeout
                ]
                input[0] = LOAD_SAMPLESHEET.out.samplesheet
                input[1] = "${params.ref_dir}/results/mm2-virus-index"
                input[2] = minimap2_params
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success

            // Check all expected output files exist
            assert path(process.out.sam[0][1]).exists()
            assert path(process.out.reads_mapped[0][1]).exists()
            assert path(process.out.reads_unmapped[0][1]).exists()
            assert path(process.out.input[0][1]).exists()

            // Get read IDs from output FASTQ files
            def fastq_mapped = path(process.out.reads_mapped[0][1]).fastq
            def fastq_unmapped = path(process.out.reads_unmapped[0][1]).fastq
            def fastq_read_ids_mapped = fastq_mapped.readNames.toSet()
            def fastq_read_ids_unmapped = fastq_unmapped.readNames.toSet()

            // Get read IDs from SAM file
            def samlines = sam(process.out.sam[0][1]).getSamLines()
            def sam_read_ids_mapped = samlines
                .collect { line -> line.split('\t')[0] }  // Get read IDs
                .toSet()

            // Get input read IDs
            def input_reads = path(process.out.input[0][1]).fastq.readNames.toSet()

            // Verify read partitioning is correct
            assert sam_read_ids_mapped == fastq_read_ids_mapped

            // Verify no overlapping reads between mapped and unmapped sets
            assert fastq_read_ids_mapped.intersect(fastq_read_ids_unmapped).size() == 0

            // Verify input FASTQ contains all reads
            assert input_reads == fastq_read_ids_mapped + fastq_read_ids_unmapped

            // Verify that some reads have multiple alignments (due to -N 10 parameter)
            def read_alignment_counts = samlines
                .collect { line -> line.split('\\t')[0] }  // Get read IDs
                .groupBy { it }  // Group by read ID
                .collectEntries { k, v -> [k, v.size()] }  // Count alignments per read
            
            // With -N 10, at least some reads should have multiple alignments
            def reads_with_multiple_alignments = read_alignment_counts.values().findAll { it > 1 }
            assert reads_with_multiple_alignments.size() > 0, "Expected some reads to have multiple alignments with -N 10 parameter"
            
            // Verify no read exceeds the -N 10 limit
            def max_alignments_per_read = read_alignment_counts.values().max() ?: 0
            assert max_alignments_per_read <= 10, "Expected no read to have more than 10 alignments with -N 10 parameter"
        }
    }

    test("When run against viral index, should correctly partition reads based on alignment status (when multiple alignments parameter isn't passed)") {
        tag "expect_success"

        when {
            params {
            }
            process {
                '''
                def minimap2_params = [
                    suffix: "test",
                    remove_sq: false,
                    alignment_params: "",
                    db_download_timeout: params.db_download_timeout
                ]
                input[0] = LOAD_SAMPLESHEET.out.samplesheet
                input[1] = "${params.ref_dir}/results/mm2-virus-index"
                input[2] = minimap2_params
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success

            // Check all expected output files exist
            assert path(process.out.sam[0][1]).exists()
            assert path(process.out.reads_mapped[0][1]).exists()
            assert path(process.out.reads_unmapped[0][1]).exists()
            assert path(process.out.input[0][1]).exists()

            // Get read IDs from output FASTQ files
            def fastq_mapped = path(process.out.reads_mapped[0][1]).fastq
            def fastq_unmapped = path(process.out.reads_unmapped[0][1]).fastq
            def fastq_read_ids_mapped = fastq_mapped.readNames.toSet()
            def fastq_read_ids_unmapped = fastq_unmapped.readNames.toSet()

            // Get read IDs from SAM file
            def samlines = sam(process.out.sam[0][1]).getSamLines()
            def sam_read_ids_mapped = samlines
                .collect { line -> line.split('\t')[0] }  // Get read IDs
                .toSet()

            // Get input read IDs
            def input_reads = path(process.out.input[0][1]).fastq.readNames.toSet()

            // Verify read partitioning is correct
            assert sam_read_ids_mapped == fastq_read_ids_mapped

            // Verify no overlapping reads between mapped and unmapped sets
            assert fastq_read_ids_mapped.intersect(fastq_read_ids_unmapped).size() == 0

            // Verify input FASTQ contains all reads
            assert input_reads == fastq_read_ids_mapped + fastq_read_ids_unmapped

            // Verify alignment counts without explicit -N parameter
            def read_alignment_counts = samlines
                .collect { line -> line.split('\\t')[0] }  // Get read IDs
                .groupBy { it }  // Group by read ID
                .collectEntries { k, v -> [k, v.size()] }  // Count alignments per read

            // Not passing -N explicitly, but default is still secondary alignment enabled
            // See: https://github.com/lh3/minimap2?tab=readme-ov-file#started
            def reads_with_multiple_alignments = read_alignment_counts.values().findAll { it > 1 }
            assert reads_with_multiple_alignments.size() > 0, "Expected some reads to have multiple alignments"
            
            def max_alignments_per_read = read_alignment_counts.values().max() ?: 0
            assert max_alignments_per_read <= 5, "Expected reasonable number of alignments per read with default parameters"
        }
    }

    test("When run against human index, should correctly partition reads based on alignment status") {
        tag "expect_success"

        when {
            params {
	    }
            process {
                '''
                def minimap2_params = [
                    suffix: "test",
                    remove_sq: false,
                    alignment_params: "",
                    db_download_timeout: params.db_download_timeout
                ]
                input[0] = LOAD_SAMPLESHEET.out.samplesheet
                input[1] = "${params.ref_dir}/results/mm2-human-index"
                input[2] = minimap2_params
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success

            // Check all expected output files exist
            assert path(process.out.sam[0][1]).exists()
            assert path(process.out.reads_mapped[0][1]).exists()
            assert path(process.out.reads_unmapped[0][1]).exists()
            assert path(process.out.input[0][1]).exists()

            // Get read IDs from output FASTQ files
            def fastq_mapped = path(process.out.reads_mapped[0][1]).fastq
            def fastq_unmapped = path(process.out.reads_unmapped[0][1]).fastq
            def fastq_read_ids_mapped = fastq_mapped.readNames.toSet()
            def fastq_read_ids_unmapped = fastq_unmapped.readNames.toSet()

            // Get read IDs from SAM file
            def samlines = sam(process.out.sam[0][1]).getSamLines()
            def sam_read_ids_mapped = samlines
                .collect { line -> line.split('\t')[0] }  // Get read IDs
                .toSet()

            // Get input read IDs
            def input_reads = path(process.out.input[0][1]).fastq.readNames.toSet()

            // Verify read partitioning is correct
            assert sam_read_ids_mapped == fastq_read_ids_mapped

            // Verify no overlapping reads between mapped and unmapped sets
            assert fastq_read_ids_mapped.intersect(fastq_read_ids_unmapped).size() == 0

            // Verify input FASTQ contains all reads
            assert input_reads == fastq_read_ids_mapped + fastq_read_ids_unmapped
        }
    }
    test("When run against ribosomal index, should correctly partition reads based on alignment status") {
        tag "expect_success"

        when {
            params {
            }
            process {
                '''
                def minimap2_params = [
                    suffix: "test",
                    remove_sq: false,
                    alignment_params: "",
                    db_download_timeout: params.db_download_timeout
                ]
                input[0] = LOAD_SAMPLESHEET.out.samplesheet
                input[1] = "${params.ref_dir}/results/mm2-ribo-index"
                input[2] = minimap2_params
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success

            // Check all expected output files exist
            assert path(process.out.sam[0][1]).exists()
            assert path(process.out.reads_mapped[0][1]).exists()
            assert path(process.out.reads_unmapped[0][1]).exists()
            assert path(process.out.input[0][1]).exists()

            // Get read IDs from output FASTQ files
            def fastq_mapped = path(process.out.reads_mapped[0][1]).fastq
            def fastq_unmapped = path(process.out.reads_unmapped[0][1]).fastq
            def fastq_read_ids_mapped = fastq_mapped.readNames.toSet()
            def fastq_read_ids_unmapped = fastq_unmapped.readNames.toSet()

            // Get read IDs from SAM file
            def samlines = sam(process.out.sam[0][1]).getSamLines()
            def sam_read_ids_mapped = samlines
                .collect { line -> line.split('\t')[0] }  // Get read IDs
                .toSet()

            // Get input read IDs
            def input_reads = path(process.out.input[0][1]).fastq.readNames.toSet()

            // Verify read partitioning is correct
            assert sam_read_ids_mapped == fastq_read_ids_mapped

            // Verify no overlapping reads between mapped and unmapped sets
            assert fastq_read_ids_mapped.intersect(fastq_read_ids_unmapped).size() == 0

            // Verify input FASTQ contains all reads
            assert input_reads == fastq_read_ids_mapped + fastq_read_ids_unmapped
        }
    }

    test("Should run correctly on empty input file against viral index") {
        tag "expect_success"
        tag "empty_file"

        setup {
            run("GZIP_FILE") {
                script "modules/local/gzipFile/main.nf"
                process {
                    '''
                    input[0] = Channel.of("empty")
                        | combine(Channel.of("${projectDir}/test-data/toy-data/empty_file.txt"))
                    '''
                }
            }
        }

        when {
            params {
            }
            process {
                '''
                def minimap2_params = [
                    suffix: "test",
                    remove_sq: false,
                    alignment_params: "",
                    db_download_timeout: params.db_download_timeout
                ]
                input[0] = GZIP_FILE.out
                input[1] = "${params.ref_dir}/results/mm2-virus-index"
                input[2] = minimap2_params
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success

            // Check all expected output files exist
            assert path(process.out.sam[0][1]).exists()
            assert path(process.out.reads_mapped[0][1]).exists()
            assert path(process.out.reads_unmapped[0][1]).exists()
            assert path(process.out.input[0][1]).exists()

            // All output files should be empty or contain only headers
            assert path(process.out.reads_mapped[0][1]).fastq.readNames.size() == 0
            assert path(process.out.reads_unmapped[0][1]).fastq.readNames.size() == 0
        }
    }
}

