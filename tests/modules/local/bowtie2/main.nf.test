nextflow_process {

    name "Test process BOWTIE2"
    script "modules/local/bowtie2/main.nf"
    process "BOWTIE2"
    config "tests/configs/run.config"
    tag "module"
    tag "bowtie2"

    setup {
        run("LOAD_SAMPLESHEET") {
            script "subworkflows/local/loadSampleSheet/main.nf"
            process {
                """
                input[0] = "${projectDir}/test-data/samplesheet.csv"
                input[1] = "illumina"
                """
            }
        }
        run("INTERLEAVE_FASTQ") {
            script "modules/local/interleaveFastq/main.nf"
            process {
                """
                input[0] = LOAD_SAMPLESHEET.out.samplesheet
                """
            }
        }
    }

    test("When run against viral index, should run without failures and read counts should match") {
        tag "expect_success"
        tag "interleaved"
        tag "align_viral"
        when {
            params {
            }
            process {
                '''
                input[0] = INTERLEAVE_FASTQ.out.output
                input[1] = "${params.ref_dir}/results/bt2-virus-index"
                input[2] = "--local --very-sensitive-local --score-min G,0.1,19"
                input[3] = "virus"
                input[4] = true
                input[5] = true
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output reads should be valid FASTQ with expected header structure
            def fastq_mapped = path(process.out.reads_mapped[0][1]).fastq
            def fastq_unmapped = path(process.out.reads_unmapped[0][1]).fastq
            for (n in fastq_mapped.readNames) {
                assert n.tokenize(" ").size() == 2
            }
            for (n in fastq_unmapped.readNames) {
                assert n.tokenize(" ").size() == 2
            }
            // Output reads should be correctly interleaved
            def ids_mapped = fastq_mapped.readNames.collect{it.tokenize(" ")[0]}
            def ids_unmapped = fastq_unmapped.readNames.collect{it.tokenize(" ")[0]}
            def num_mapped = fastq_mapped.readNames.collect{it.tokenize(" ")[1]}
            def num_unmapped = fastq_unmapped.readNames.collect{it.tokenize(" ")[1]}
            assert ids_mapped.size() % 2 == 0
            assert ids_unmapped.size() % 2 == 0
            for (int i=0; i<ids_mapped.size()/2; i++){
                assert ids_mapped[2*i] == ids_mapped[2*i+1]
                assert num_mapped[2*i] == "1"
                assert num_mapped[2*i+1] == "2"
            }
            for (int i=0; i<ids_unmapped.size()/2; i++){
                assert ids_unmapped[2*i] == ids_unmapped[2*i+1]
                assert num_unmapped[2*i] == "1"
                assert num_unmapped[2*i+1] == "2"
            }
            // Total input and output read counts should match
            def fastq_in = path(process.out.input[0][1]).fastq
            def ids_in = fastq_in.readNames.collect{it.tokenize(" ")[0]}
            assert ids_in.size() == ids_mapped.size() + ids_unmapped.size()
            for (i in ids_in) {
                if (i in ids_mapped) {
                    assert !(i in ids_unmapped)
                } else {
                    assert (i in ids_unmapped)
                }
            }
            // SAM should equal mapped output reads plus a few header lines
            def countGzipLinesSam = { file -> ["bash", "-c", "zcat " + file + " | grep -v \"^@\" | wc -l"].execute().text.trim() as Integer }
            def output_lines_sam = countGzipLinesSam(process.out.sam[0][1])
            assert output_lines_sam == ids_mapped.size()
        }
    }

    test("When run against human index, should run without failures and read counts should match") {
        tag "expect_success"
        tag "interleaved"
        when {
            params {
            }
            process {
                '''
                input[0] = INTERLEAVE_FASTQ.out.output
                input[1] = "${params.ref_dir}/results/bt2-human-index"
                input[2] = "--local --very-sensitive-local"
                input[3] = "human"
                input[4] = false
                input[5] = true
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output reads should be valid FASTQ with expected header structure
            def fastq_mapped = path(process.out.reads_mapped[0][1]).fastq
            def fastq_unmapped = path(process.out.reads_unmapped[0][1]).fastq
            for (n in fastq_mapped.readNames) {
                assert n.tokenize(" ").size() == 2
            }
            for (n in fastq_unmapped.readNames) {
                assert n.tokenize(" ").size() == 2
            }
            // Output reads should be correctly interleaved
            def ids_mapped = fastq_mapped.readNames.collect{it.tokenize(" ")[0]}
            def ids_unmapped = fastq_unmapped.readNames.collect{it.tokenize(" ")[0]}
            def num_mapped = fastq_mapped.readNames.collect{it.tokenize(" ")[1]}
            def num_unmapped = fastq_unmapped.readNames.collect{it.tokenize(" ")[1]}
            assert ids_mapped.size() % 2 == 0
            assert ids_unmapped.size() % 2 == 0
            for (int i=0; i<ids_mapped.size()/2; i++){
                assert ids_mapped[2*i] == ids_mapped[2*i+1]
                assert num_mapped[2*i] == "1"
                assert num_mapped[2*i+1] == "2"
            }
            for (int i=0; i<ids_unmapped.size()/2; i++){
                assert ids_unmapped[2*i] == ids_unmapped[2*i+1]
                assert num_unmapped[2*i] == "1"
                assert num_unmapped[2*i+1] == "2"
            }
            // Total input and output read counts should match
            def fastq_in = path(process.out.input[0][1]).fastq
            def ids_in = fastq_in.readNames.collect{it.tokenize(" ")[0]}
            assert ids_in.size() == ids_mapped.size() + ids_unmapped.size()
            for (i in ids_in) {
                if (i in ids_mapped) {
                    assert !(i in ids_unmapped)
                } else {
                    assert (i in ids_unmapped)
                }
            }
            // SAM should equal mapped output reads plus a few header lines
            def countGzipLinesSam = { file -> ["bash", "-c", "zcat " + file + " | grep -v \"^@\" | wc -l"].execute().text.trim() as Integer }
            def output_lines_sam = countGzipLinesSam(process.out.sam[0][1])
            assert output_lines_sam == ids_mapped.size()
        }
    }

    test("When run against nonhuman contaminant index, should run without failures and read counts should match") {
        tag "expect_success"
        tag "interleaved"
        when {
            params {
            }
            process {
                '''
                input[0] = INTERLEAVE_FASTQ.out.output
                input[1] = "${params.ref_dir}/results/bt2-other-index"
                input[2] = "--local --very-sensitive-local"
                input[3] = "other"
                input[4] = false
                input[5] = true
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output reads should be valid FASTQ with expected header structure
            def fastq_mapped = path(process.out.reads_mapped[0][1]).fastq
            def fastq_unmapped = path(process.out.reads_unmapped[0][1]).fastq
            for (n in fastq_mapped.readNames) {
                assert n.tokenize(" ").size() == 2
            }
            for (n in fastq_unmapped.readNames) {
                assert n.tokenize(" ").size() == 2
            }
            // Output reads should be correctly interleaved
            def ids_mapped = fastq_mapped.readNames.collect{it.tokenize(" ")[0]}
            def ids_unmapped = fastq_unmapped.readNames.collect{it.tokenize(" ")[0]}
            def num_mapped = fastq_mapped.readNames.collect{it.tokenize(" ")[1]}
            def num_unmapped = fastq_unmapped.readNames.collect{it.tokenize(" ")[1]}
            assert ids_mapped.size() % 2 == 0
            assert ids_unmapped.size() % 2 == 0
            for (int i=0; i<ids_mapped.size()/2; i++){
                assert ids_mapped[2*i] == ids_mapped[2*i+1]
                assert num_mapped[2*i] == "1"
                assert num_mapped[2*i+1] == "2"
            }
            for (int i=0; i<ids_unmapped.size()/2; i++){
                assert ids_unmapped[2*i] == ids_unmapped[2*i+1]
                assert num_unmapped[2*i] == "1"
                assert num_unmapped[2*i+1] == "2"
            }
            // Total input and output read counts should match
            def fastq_in = path(process.out.input[0][1]).fastq
            def ids_in = fastq_in.readNames.collect{it.tokenize(" ")[0]}
            assert ids_in.size() == ids_mapped.size() + ids_unmapped.size()
            for (i in ids_in) {
                if (i in ids_mapped) {
                    assert !(i in ids_unmapped)
                } else {
                    assert (i in ids_unmapped)
                }
            }
            // SAM should equal mapped output reads plus a few header lines
            def countGzipLinesSam = { file -> ["bash", "-c", "zcat " + file + " | grep -v \"^@\" | wc -l"].execute().text.trim() as Integer }
            def output_lines_sam = countGzipLinesSam(process.out.sam[0][1])
            assert output_lines_sam == ids_mapped.size()
        }
    }
}
