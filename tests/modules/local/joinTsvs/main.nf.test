nextflow_process {

    name "Test process JOIN_TSVS"
    script "modules/local/joinTsvs/main.nf"
    process "JOIN_TSVS"
    config "tests/run.config"
    tag "module"
    tag "join_tsvs"

    test("Should break when called on a column not in tsv1"){
        tag "expect_failed"
        when {
            params {}
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted.tsv.gz"))
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted_2.tsv.gz"))
                input[1] = "v"
                input[2] = "inner"
                input[3] = "test"
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("ValueError: Join field missing from file 1")
            assert !process.errorReport.contains("ValueError: Join field missing from file 2")
            assert !process.errorReport.contains("ValueError: File 1 is not sorted")
            assert !process.errorReport.contains("ValueError: File 2 is not sorted")
            assert !process.errorReport.contains("ValueError: Duplicate field name found across both files")
            assert !process.errorReport.contains("ValueError: Unsupported many-to-many join detected")
            assert !process.errorReport.contains("ValueError: Strict join failed")
        }
    }

    test("Should break when called on a column not in tsv2"){
        tag "expect_failed"
        when {
            params {}
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted.tsv.gz"))
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted_2.tsv.gz"))
                input[1] = "y"
                input[2] = "inner"
                input[3] = "test"
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert !process.errorReport.contains("ValueError: Join field missing from file 1")
            assert process.errorReport.contains("ValueError: Join field missing from file 2")
            assert !process.errorReport.contains("ValueError: File 1 is not sorted")
            assert !process.errorReport.contains("ValueError: File 2 is not sorted")
            assert !process.errorReport.contains("ValueError: Duplicate field name found across both files")
            assert !process.errorReport.contains("ValueError: Unsupported many-to-many join detected")
            assert !process.errorReport.contains("ValueError: Strict join failed")
        }
    }

    test("Should break when tsv1 is unsorted"){
        tag "expect_failed"
        when {
            params {}
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_unsorted.tsv.gz"))
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted.tsv.gz"))
                input[1] = "x"
                input[2] = "inner"
                input[3] = "test"
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert !process.errorReport.contains("ValueError: Join field missing from file 2")
            assert !process.errorReport.contains("ValueError: Join field missing from file 1")
            assert process.errorReport.contains("ValueError: File 1 is not sorted")
            assert !process.errorReport.contains("ValueError: File 2 is not sorted")
            assert !process.errorReport.contains("ValueError: Duplicate field name found across both files")
            assert !process.errorReport.contains("ValueError: Unsupported many-to-many join detected")
            assert !process.errorReport.contains("ValueError: Strict join failed")
        }
    }

    test("Should break when tsv2 is unsorted"){
        tag "expect_failed"
        when {
            params {}
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted.tsv.gz"))
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_unsorted.tsv.gz"))
                input[1] = "x"
                input[2] = "inner"
                input[3] = "test"
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert !process.errorReport.contains("ValueError: Join field missing from file 2")
            assert !process.errorReport.contains("ValueError: Join field missing from file 1")
            assert !process.errorReport.contains("ValueError: File 1 is not sorted")
            assert process.errorReport.contains("ValueError: File 2 is not sorted")
            assert !process.errorReport.contains("ValueError: Duplicate field name found across both files")
            assert !process.errorReport.contains("ValueError: Unsupported many-to-many join detected")
            assert !process.errorReport.contains("ValueError: Strict join failed")
        }
    }

    test("Should break when fields are duplicated across files"){
        tag "expect_failed"
        when {
            params {}
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted.tsv.gz"))
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted_copy.tsv.gz"))
                input[1] = "x"
                input[2] = "inner"
                input[3] = "test"
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert !process.errorReport.contains("ValueError: Join field missing from file 2")
            assert !process.errorReport.contains("ValueError: Join field missing from file 1")
            assert !process.errorReport.contains("ValueError: File 1 is not sorted")
            assert !process.errorReport.contains("ValueError: File 2 is not sorted")
            assert process.errorReport.contains("ValueError: Duplicate field name found across both files")
            assert !process.errorReport.contains("ValueError: Unsupported many-to-many join detected")
            assert !process.errorReport.contains("ValueError: Strict join failed")
        }
    }

    test("Should break when attempting to perform a many-to-many join"){
        tag "expect_failed"
        when {
            params {}
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted.tsv.gz"))
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted_rename.tsv.gz"))
                input[1] = "x"
                input[2] = "inner"
                input[3] = "test"
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert !process.errorReport.contains("ValueError: Join field missing from file 2")
            assert !process.errorReport.contains("ValueError: Join field missing from file 1")
            assert !process.errorReport.contains("ValueError: File 1 is not sorted")
            assert !process.errorReport.contains("ValueError: File 2 is not sorted")
            assert !process.errorReport.contains("ValueError: Duplicate field name found across both files")
            assert process.errorReport.contains("ValueError: Unsupported many-to-many join detected")
            assert !process.errorReport.contains("ValueError: Strict join failed")
        }
    }

    test("Should break when attempting to strict join on files with incompatible rows"){
        tag "expect_failed"
        when {
            params {}
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted.tsv.gz"))
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted_2.tsv.gz"))
                input[1] = "x"
                input[2] = "strict"
                input[3] = "test"
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert !process.errorReport.contains("ValueError: Join field missing from file 2")
            assert !process.errorReport.contains("ValueError: Join field missing from file 1")
            assert !process.errorReport.contains("ValueError: File 1 is not sorted")
            assert !process.errorReport.contains("ValueError: File 2 is not sorted")
            assert !process.errorReport.contains("ValueError: Duplicate field name found across both files")
            assert !process.errorReport.contains("ValueError: Unsupported many-to-many join detected")
            assert process.errorReport.contains("ValueError: Strict join failed")
        }
    }

    test("Should inner-join without errors on correct input and produce correct output"){
        tag "expect_success"
        when {
            params {}
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted.tsv.gz"))
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted_2.tsv.gz"))
                input[1] = "x"
                input[2] = "inner"
                input[3] = "test"
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Should have all columns from both inputs (and no others)
            def tab_in_1 = path(process.out.input[0][1][0]).csv(sep: "\t", decompress: true)
            def tab_in_2 = path(process.out.input[0][1][1]).csv(sep: "\t", decompress: true)
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            assert tab_out.columnCount == tab_in_1.columnCount + tab_in_2.columnCount - 1
            for (col in tab_in_1.columnNames) {
                assert col in tab_out.columnNames
            }
            for (col in tab_in_2.columnNames) {
                assert col in tab_out.columnNames
            }
            // Should have expected number of rows
            def ids_1 = tab_in_1.columns["x"]
            def ids_2 = tab_in_2.columns["x"]
            def match = 0
            for (i in ids_1){
                match += ids_2.count(i)
            }
            assert tab_out.rowCount == match
        }
    }

    test("Should left-join without errors on correct input and produce correct output"){
        tag "expect_success"
        when {
            params {}
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted.tsv.gz"))
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted_2.tsv.gz"))
                input[1] = "x"
                input[2] = "left"
                input[3] = "test"
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Should have all columns from both inputs (and no others)
            def tab_in_1 = path(process.out.input[0][1][0]).csv(sep: "\t", decompress: true)
            def tab_in_2 = path(process.out.input[0][1][1]).csv(sep: "\t", decompress: true)
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            assert tab_out.columnCount == tab_in_1.columnCount + tab_in_2.columnCount - 1
            for (col in tab_in_1.columnNames) {
                assert col in tab_out.columnNames
            }
            for (col in tab_in_2.columnNames) {
                assert col in tab_out.columnNames
            }
            // Should have expected number of rows
            def ids_1 = tab_in_1.columns["x"]
            def ids_2 = tab_in_2.columns["x"]
            def match = 0
            for (i in ids_1){
                match += Math.max(ids_2.count(i),1)
            }
            assert tab_out.rowCount == match
        }
    }

    test("Should right-join without errors on correct input and produce correct output"){
        tag "expect_success"
        when {
            params {}
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted.tsv.gz"))
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted_2.tsv.gz"))
                input[1] = "x"
                input[2] = "right"
                input[3] = "test"
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Should have all columns from both inputs (and no others)
            def tab_in_1 = path(process.out.input[0][1][0]).csv(sep: "\t", decompress: true)
            def tab_in_2 = path(process.out.input[0][1][1]).csv(sep: "\t", decompress: true)
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            assert tab_out.columnCount == tab_in_1.columnCount + tab_in_2.columnCount - 1
            for (col in tab_in_1.columnNames) {
                assert col in tab_out.columnNames
            }
            for (col in tab_in_2.columnNames) {
                assert col in tab_out.columnNames
            }
            // Should have expected number of rows
            def ids_1 = tab_in_1.columns["x"]
            def ids_2 = tab_in_2.columns["x"]
            def match = 0
            for (i in ids_2){
                match += Math.max(ids_1.count(i),1)
            }
            assert tab_out.rowCount == match
        }
    }

    test("Should outer-join without errors on correct input and produce correct output"){
        tag "expect_success"
        when {
            params {}
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted.tsv.gz"))
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted_2.tsv.gz"))
                input[1] = "x"
                input[2] = "outer"
                input[3] = "test"
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Should have all columns from both inputs (and no others)
            def tab_in_1 = path(process.out.input[0][1][0]).csv(sep: "\t", decompress: true)
            def tab_in_2 = path(process.out.input[0][1][1]).csv(sep: "\t", decompress: true)
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            assert tab_out.columnCount == tab_in_1.columnCount + tab_in_2.columnCount - 1
            for (col in tab_in_1.columnNames) {
                assert col in tab_out.columnNames
            }
            for (col in tab_in_2.columnNames) {
                assert col in tab_out.columnNames
            }
            // Should have expected number of rows
            def ids_1 = tab_in_1.columns["x"]
            def ids_2 = tab_in_2.columns["x"]
            def match = 0
            def mismatch = 0
            for (i in ids_1){
                match += Math.max(ids_2.count(i),1)
            }
            for (i in ids_2){
                mismatch += (i in ids_1) ? 0 : 1
            }
            assert tab_out.rowCount == match + mismatch
        }
    }

    test("Should strict-join without errors on correct input and produce correct output"){
        tag "expect_success"
        when {
            params {}
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted.tsv.gz"))
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted_rename_unique.tsv.gz"))
                input[1] = "x"
                input[2] = "strict"
                input[3] = "test"
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Should have all columns from both inputs (and no others)
            def tab_in_1 = path(process.out.input[0][1][0]).csv(sep: "\t", decompress: true)
            def tab_in_2 = path(process.out.input[0][1][1]).csv(sep: "\t", decompress: true)
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            assert tab_out.columnCount == tab_in_1.columnCount + tab_in_2.columnCount - 1
            for (col in tab_in_1.columnNames) {
                assert col in tab_out.columnNames
            }
            for (col in tab_in_2.columnNames) {
                assert col in tab_out.columnNames
            }
            // Should have expected number of rows
            def ids_1 = tab_in_1.columns["x"]
            def ids_2 = tab_in_2.columns["x"]
            def match = 0
            for (i in ids_1){
                match += ids_2.count(i)
            }
            assert tab_out.rowCount == match
        }
    }

}
