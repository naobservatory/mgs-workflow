nextflow_process {

    name "Test process BBMAP_STREAMED"
    script "modules/local/bbmap/main.nf"
    process "BBMAP_STREAMED"
    config "tests/run.config"

    setup {
        run("LOAD_SAMPLESHEET") {
            script "subworkflows/local/loadSampleSheet/main.nf"
            process {
                """
                input[0] = "test-data/samplesheet.csv"
                """
            }
        }
        run("INTERLEAVE_FASTQ_SEQTK") {
            script "modules/local/interleaveFastq/main.nf"
            process {
                """
                input[0] = LOAD_SAMPLESHEET.out.samplesheet
                """
            }
        }
    }

    test("When run against human index, should run without failures and read counts should match") {
        when {
            params {
            }
            process {
                '''
                input[0] = INTERLEAVE_FASTQ_SEQTK.out
                input[1] = "${params.ref_dir}/results/bbm-human-index"
                input[2] = "human"
                input[3] = false
                input[4] = true
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output reads should have a nonzero number of lines divisible by eight
            def countGzipLines = { file -> path(file).linesGzip.size() }
            def output_lines_mapped = countGzipLines(process.out.reads_mapped[0][1])
            def output_lines_unmapped = countGzipLines(process.out.reads_unmapped[0][1])
            assert output_lines_mapped > 0
            assert output_lines_mapped % 8 == 0
            assert output_lines_unmapped > 0
            assert output_lines_unmapped % 8 == 0
            // Total input and output read counts should match
            def total_input_lines  = countGzipLines(process.out.input[0][1])
            assert total_input_lines == (output_lines_mapped + output_lines_unmapped)
            // SAM should equal mapped output reads plus a few header lines
            def countGzipLinesSam = { file -> ["bash", "-c", "zcat " + file + " | grep -v \"^@\" | wc -l"].execute().text.trim() as Integer }
            def output_lines_sam = countGzipLinesSam(process.out.sam[0][1])
            assert output_lines_sam == (output_lines_mapped / 4)
        }
    }

    test("When run against nonhuman contaminant index, should run without failures and read counts should match") {
        when {
            params {
            }
            process {
                '''
                input[0] = INTERLEAVE_FASTQ_SEQTK.out
                input[1] = "${params.ref_dir}/results/bbm-other-index"
                input[2] = "other"
                input[3] = false
                input[4] = true
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output reads should have a nonzero number of lines divisible by eight
            def countGzipLines = { file -> path(file).linesGzip.size() }
            def output_lines_mapped = countGzipLines(process.out.reads_mapped[0][1])
            def output_lines_unmapped = countGzipLines(process.out.reads_unmapped[0][1])
            assert output_lines_mapped > 0
            assert output_lines_mapped % 8 == 0
            assert output_lines_unmapped > 0
            assert output_lines_unmapped % 8 == 0
            // Total input and output read counts should match
            def total_input_lines  = countGzipLines(process.out.input[0][1])
            assert total_input_lines == (output_lines_mapped + output_lines_unmapped)
            // SAM should equal mapped output reads plus a few header lines
            def countGzipLinesSam = { file -> ["bash", "-c", "zcat " + file + " | grep -v \"^@\" | wc -l"].execute().text.trim() as Integer }
            def output_lines_sam = countGzipLinesSam(process.out.sam[0][1])
            assert output_lines_sam == (output_lines_mapped / 4)
        }
    }

    test("Repeating human test with remove_sq enabled") {
        when {
            params {
            }
            process {
                '''
                input[0] = INTERLEAVE_FASTQ_SEQTK.out
                input[1] = "${params.ref_dir}/results/bbm-human-index"
                input[2] = "human"
                input[3] = true
                input[4] = true
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output reads should have a nonzero number of lines divisible by eight
            def countGzipLines = { file -> path(file).linesGzip.size() }
            def output_lines_mapped = countGzipLines(process.out.reads_mapped[0][1])
            def output_lines_unmapped = countGzipLines(process.out.reads_unmapped[0][1])
            assert output_lines_mapped > 0
            assert output_lines_mapped % 8 == 0
            assert output_lines_unmapped > 0
            assert output_lines_unmapped % 8 == 0
            // Total input and output read counts should match
            def total_input_lines  = countGzipLines(process.out.input[0][1])
            assert total_input_lines == (output_lines_mapped + output_lines_unmapped)
            // SAM should equal mapped output reads plus a few header lines
            def countGzipLinesSam = { file -> ["bash", "-c", "zcat " + file + " | grep -v \"^@\" | wc -l"].execute().text.trim() as Integer }
            def output_lines_sam = countGzipLinesSam(process.out.sam[0][1])
            assert output_lines_sam == (output_lines_mapped / 4)
        }
    }
}
