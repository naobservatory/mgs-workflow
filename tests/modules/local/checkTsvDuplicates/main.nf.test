nextflow_process {

    name "Test process CHECK_TSV_DUPLICATES"
    script "modules/local/checkTsvDuplicates/main.nf"
    process "CHECK_TSV_DUPLICATES"
    config "tests/configs/run.config"
    tag "module"
    tag "check_tsv_duplicates"

    test("Should fail when selected field is not present"){
        tag "expect_failed"
        when {
            params {
                input_path = "${projectDir}/test-data/toy-data/test_tab_sorted.tsv"
                field = "a"
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.input_path))
                input[1] = params.field
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("ValueError: Field not found in header: a")
            assert !process.errorReport.contains("ValueError: No header to select fields from")
        }
    }

    test("Should fail when input file is empty (no header)"){
        tag "expect_failed"
        tag "empty_input"
        when {
            params {
                input_path = "${projectDir}/test-data/toy-data/empty_file.txt"
                field = "x"
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.input_path))
                input[1] = params.field
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert !process.errorReport.contains("ValueError: Field not found in header")
            assert process.errorReport.contains("ValueError: No header to select fields from")
        }
    }

    test("Should fail when selected field is not sorted"){
        tag "expect_failed"
        when {
            params {
                input_path = "${projectDir}/test-data/toy-data/test_tab_unsorted.tsv"
                field = "x"
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.input_path))
                input[1] = params.field
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("ValueError: File is not sorted")
            assert !process.errorReport.contains("ValueError: No header to select fields from")
        }
    }

    test("Should fail when selected field contains duplicates"){
        tag "expect_failed"
        when {
            params {
                input_path = "${projectDir}/test-data/toy-data/test_tab_sorted.tsv"
                field = "x"
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.input_path))
                input[1] = params.field
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("ValueError: Duplicate value found in field x")
            assert !process.errorReport.contains("ValueError: No header to select fields from")
        }
    }

    test("Should produce no change when selected field contains no duplicates"){
        tag "expect_success"
        when {
            params {
                input_path = "${projectDir}/test-data/toy-data/test_tab_sorted.tsv"
                field = "y"
            }
            process {
                '''
                input[0] = Channel.of("test").combine(Channel.of(params.input_path))
                input[1] = params.field
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output should match input
            assert path(process.out.output[0][1]).md5 == path(process.out.input[0][1]).md5
        }
    }

}