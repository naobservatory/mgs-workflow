nextflow_process {

    name "Test process LABEL_KRAKEN_REPORTS_STREAMED"
    script "modules/local/labelKrakenReports/main.nf"
    process "LABEL_KRAKEN_REPORTS_STREAMED"
    config "tests/run_dev_se.config"

    setup {
        run("LOAD_SAMPLESHEET") {
            script "subworkflows/local/loadSampleSheet/main.nf"
            process {
                """
                input[0] = "test-data/single-end-samplesheet.csv"
                """
            }
        }
        run("COPY_FILE") {
            script "modules/local/copyFile/main.nf"
            process {
                """
                input[0] = LOAD_SAMPLESHEET.out.samplesheet
                input[1] = "input.fastq.gz"
                """
            }
        }
        run("KRAKEN_STREAMED") {
            script "modules/local/kraken/main.nf"
            process {
                '''
                input[0] = COPY_FILE.out
                input[1] = "${params.ref_dir}/results/kraken_db"
                '''
            }
        }
    }

    test("Should run without failures and read counts should match") {
        when {
            params {}
            process {
                '''
                input[0] = KRAKEN_STREAMED.out.report
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output lines should match input lines (plus header)
            def countGzipLines = { file -> path(file).linesGzip.size() }
            def output_lines = countGzipLines(process.out.report[0])
            def input_lines = countGzipLines(process.out.input[0])
            assert output_lines == input_lines + 1
        }
    }
}
