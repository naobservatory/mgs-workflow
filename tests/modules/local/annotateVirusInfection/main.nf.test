nextflow_process {

    name "Test process ANNOTATE_VIRUS_INFECTION"
    script "modules/local/annotateVirusInfection/main.nf"
    process "ANNOTATE_VIRUS_INFECTION"
    config "tests/configs/run.config"
    tag "module"
    tag "annotate_virus_infection"

    test("Should run without errors and produce expected output"){
        tag "expect_success"
        when {
            params {
                virus_db = "${projectDir}/test-data/toy-data/virus-taxonomy/test-virus-db.tsv"
                host_db = "${projectDir}/test-data/toy-data/virus-taxonomy/test-host-db.tsv"
                infection_db = "${projectDir}/test-data/toy-data/virus-taxonomy/test-infection-db.tsv"
                nodes = "${projectDir}/test-data/toy-data/virus-taxonomy/test-nodes.tsv"
                hard_exclude_taxids = file("${projectDir}/test-data/toy-data/virus-taxonomy/test-hard-excluded-taxids.txt").readLines().first()
                soft_exclude_taxids = file("${projectDir}/test-data/toy-data/virus-taxonomy/test-soft-excluded-taxids.txt").readLines().first()
            }
            process {
                '''
                input[0] = Channel.of(params.virus_db)
                input[1] = Channel.of(params.host_db)
                input[2] = Channel.of(params.infection_db)
                input[3] = Channel.of(params.nodes)
                input[4] = Channel.of(params.hard_exclude_taxids)
                input[5] = Channel.of(params.soft_exclude_taxids)
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Output should match input with one extra column per host taxon
            def virus_tab_out = path(process.out.db[0]).csv(sep: "\t", decompress: true)
            def virus_tab_in = path(params.virus_db).csv(sep: "\t")
            def host_tab_in = path(params.host_db).csv(sep: "\t")
            assert virus_tab_out.rowCount == virus_tab_in.rowCount
            assert virus_tab_out.columnCount == virus_tab_in.columnCount + host_tab_in.rowCount
            for (c in virus_tab_in.columnNames){
                assert virus_tab_in.columns[c] == virus_tab_out.columns[c]
            }
            // Infection status should match expected status for each host taxon
            for (host in host_tab_in.columns["name"]){
                def col_exp = "expected_status_" + host
                def col_obs = "infection_status_" + host
                assert virus_tab_out.columns[col_exp] == virus_tab_out.columns[col_obs]
            }
        }
    }
}
