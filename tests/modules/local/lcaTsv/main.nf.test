def filter_tab = { tab_in, group_field, group_id -> csv(tab_in.table.where(
    tab_in.table.stringColumn(group_field).isEqualTo(group_id)
    ))}

nextflow_process {

    name "Test process LCA_TSV"
    script "modules/local/lcaTsv/main.nf"
    process "LCA_TSV"
    config "tests/configs/run.config"
    tag "module"
    tag "lca_tsv"

    test("Should run without errors and produce expected output when run on valid natural input"){
        tag "expect_success"
        tag "natural"
        when {
            params {
                input_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-input.tsv"
                nodes_db_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-nodes.dmp"
                names_db_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-names.dmp"
                group_field = "seq_id"
                taxid_field = "taxid"
                score_field = "test_score"
                artificial_taxid = 8000
                prefix = "test"
            }
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of(params.input_path))
                input[1] = params.nodes_db_path
                input[2] = params.names_db_path
                input[3] = params.group_field
                input[4] = params.taxid_field
                input[5] = params.score_field
                input[6] = params.artificial_taxid
                input[7] = params.prefix
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Output should have one row per input group
            def tab_in = path(process.out.input[0][1]).csv(sep: "\t")
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t")
            def groups = tab_in.columns[params.group_field].unique()
            assert tab_out.rowCount == groups.size()
            // Output should have expected column names
            def exp_headers_base = [params.taxid_field + "_lca",
                "n_assignments_total", "n_assignments_classified",
                params.taxid_field + "_top", params.taxid_field + "_top_classified",
                params.score_field + "_min", params.score_field + "_max",
                params.score_field + "_mean"]
            def exp_headers_prefixed = exp_headers_base.collect { params.prefix + "_" + it }
            def exp_headers_all = exp_headers_prefixed.collect { it + "_all" }
            def exp_headers_natural = exp_headers_prefixed.collect { it + "_natural" }
            def exp_headers_artificial = exp_headers_prefixed.collect { it + "_artificial" }
            def exp_headers = [params.group_field] + exp_headers_all + exp_headers_natural + exp_headers_artificial
            assert tab_out.columnNames == exp_headers
            // Output should have expected column values
            for (group in groups) {
                def tab_in_filtered = filter_tab(tab_in, params.group_field, group)
                def tab_out_filtered = filter_tab(tab_out, params.group_field, group)
                assert tab_out_filtered.rowCount == 1
                def exp_lca = tab_in_filtered.columns["exp_lca"][0]
                def exp_top_taxid = tab_in_filtered.columns["exp_top_taxid"][0]
                def exp_n_entries = tab_in_filtered.rowCount
                def exp_min_score = tab_in_filtered.columns[params.score_field].min()
                def exp_max_score = tab_in_filtered.columns[params.score_field].max()
                def exp_mean_score = tab_in_filtered.columns[params.score_field].sum() / exp_n_entries
                assert tab_out_filtered.columns[params.group_field][0] == group
                assert tab_out_filtered.columns[params.prefix + "_" + params.taxid_field + "_lca_all"][0] == exp_lca
                assert tab_out_filtered.columns[params.prefix + "_n_assignments_total_all"][0] == exp_n_entries
                assert tab_out_filtered.columns[params.prefix + "_" + params.score_field + "_min_all"][0] == exp_min_score
                assert tab_out_filtered.columns[params.prefix + "_" + params.score_field + "_max_all"][0] == exp_max_score
                assert tab_out_filtered.columns[params.prefix + "_" + params.score_field + "_mean_all"][0] == exp_mean_score
                assert tab_out_filtered.columns[params.prefix + "_" + params.taxid_field + "_top_all"][0] == exp_top_taxid
                // All entries should be natural
                assert tab_out_filtered.columns[params.prefix + "_n_assignments_total_natural"][0] == exp_n_entries
                assert tab_out_filtered.columns[params.prefix + "_n_assignments_total_artificial"][0] == 0
                assert tab_out_filtered.columns[params.prefix + "_" + params.taxid_field + "_lca_natural"][0] == exp_lca
                assert tab_out_filtered.columns[params.prefix + "_" + params.taxid_field + "_top_natural"][0] == exp_top_taxid
            }
        }
    }

    test("Should run without errors and produce expected output when run on mixed natural and artificial input"){
        tag "expect_success"
        tag "artificial"
        when {
            params {
                input_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-input-artificial.tsv"
                nodes_db_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-nodes.dmp"
                names_db_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-names.dmp"
                group_field = "seq_id"
                taxid_field = "taxid"
                score_field = "test_score"
                artificial_taxid = 8000
                prefix = "test"
            }
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of(params.input_path))
                input[1] = params.nodes_db_path
                input[2] = params.names_db_path
                input[3] = params.group_field
                input[4] = params.taxid_field
                input[5] = params.score_field
                input[6] = params.artificial_taxid
                input[7] = params.prefix
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Output should have one row per input group
            def tab_in = path(process.out.input[0][1]).csv(sep: "\t")
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t")
            def groups = tab_in.columns[params.group_field].unique()
            assert tab_out.rowCount == groups.size()
            // Output should have expected column names
            def exp_headers_base = [params.taxid_field + "_lca",
                "n_assignments_total", "n_assignments_classified",
                params.taxid_field + "_top", params.taxid_field + "_top_classified",
                params.score_field + "_min", params.score_field + "_max",
                params.score_field + "_mean"]
            def exp_headers_prefixed = exp_headers_base.collect { params.prefix + "_" + it }
            def exp_headers_all = exp_headers_prefixed.collect { it + "_all" }
            def exp_headers_natural = exp_headers_prefixed.collect { it + "_natural" }
            def exp_headers_artificial = exp_headers_prefixed.collect { it + "_artificial" }
            def exp_headers = [params.group_field] + exp_headers_all + exp_headers_natural + exp_headers_artificial
            assert tab_out.columnNames == exp_headers
            // Output should have expected column values
            for (group in groups) {
                def tab_in_filtered = filter_tab(tab_in, params.group_field, group)
                def tab_out_filtered = filter_tab(tab_out, params.group_field, group)
                assert tab_out_filtered.rowCount == 1
                def exp_lca_all = tab_in_filtered.columns["exp_lca_all"][0]
                def exp_lca_natural = tab_in_filtered.columns["exp_lca_natural"][0]
                def exp_lca_artificial = tab_in_filtered.columns["exp_lca_artificial"][0]
                assert tab_out_filtered.columns[params.group_field][0] == group
                assert tab_out_filtered.columns[params.prefix + "_" + params.taxid_field + "_lca_all"][0] == exp_lca_all
                assert tab_out_filtered.columns[params.prefix + "_" + params.taxid_field + "_lca_natural"][0] == exp_lca_natural
                assert tab_out_filtered.columns[params.prefix + "_" + params.taxid_field + "_lca_artificial"][0] == exp_lca_artificial
            }
        }
    }

    test("Should run without errors and produce expected output when run on partially unclassified input"){
        tag "expect_success"
        tag "unclassified"
        when {
            params {
                input_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-input-unclassified.tsv"
                nodes_db_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-nodes.dmp"
                names_db_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-names.dmp"
                group_field = "seq_id"
                taxid_field = "taxid"
                score_field = "test_score"
                artificial_taxid = 8000
                prefix = "test"
            }
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of(params.input_path))
                input[1] = params.nodes_db_path
                input[2] = params.names_db_path
                input[3] = params.group_field
                input[4] = params.taxid_field
                input[5] = params.score_field
                input[6] = params.artificial_taxid
                input[7] = params.prefix
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            // Output should have one row per input group
            def tab_in = path(process.out.input[0][1]).csv(sep: "\t")
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t")
            def groups = tab_in.columns[params.group_field].unique()
            assert tab_out.rowCount == groups.size()
            // Output should have expected column names
            def exp_headers_base = [params.taxid_field + "_lca",
                "n_assignments_total", "n_assignments_classified",
                params.taxid_field + "_top", params.taxid_field + "_top_classified",
                params.score_field + "_min", params.score_field + "_max",
                params.score_field + "_mean"]
            def exp_headers_prefixed = exp_headers_base.collect { params.prefix + "_" + it }
            def exp_headers_all = exp_headers_prefixed.collect { it + "_all" }
            def exp_headers_natural = exp_headers_prefixed.collect { it + "_natural" }
            def exp_headers_artificial = exp_headers_prefixed.collect { it + "_artificial" }
            def exp_headers = [params.group_field] + exp_headers_all + exp_headers_natural + exp_headers_artificial
            assert tab_out.columnNames == exp_headers
            // Output should have expected column values
            for (group in groups) {
                def tab_in_filtered = filter_tab(tab_in, params.group_field, group)
                def tab_out_filtered = filter_tab(tab_out, params.group_field, group)
                assert tab_out_filtered.rowCount == 1
                def exp_lca = tab_in_filtered.columns["exp_lca"][0]
                def exp_top_taxid = tab_in_filtered.columns["exp_top_taxid"][0]
                def exp_top_taxid_classified = tab_in_filtered.columns["exp_top_taxid_classified"][0]
                def exp_n_entries = tab_in_filtered.rowCount
                def exp_min_score = tab_in_filtered.columns[params.score_field].min()
                def exp_max_score = tab_in_filtered.columns[params.score_field].max()
                def exp_mean_score = tab_in_filtered.columns[params.score_field].sum() / exp_n_entries
                assert tab_out_filtered.columns[params.group_field][0] == group
                assert tab_out_filtered.columns[params.prefix + "_" + params.taxid_field + "_lca_all"][0] == exp_lca
                assert tab_out_filtered.columns[params.prefix + "_n_assignments_total_all"][0] == exp_n_entries
                assert tab_out_filtered.columns[params.prefix + "_" + params.score_field + "_min_all"][0] == exp_min_score
                assert tab_out_filtered.columns[params.prefix + "_" + params.score_field + "_max_all"][0] == exp_max_score
                assert tab_out_filtered.columns[params.prefix + "_" + params.score_field + "_mean_all"][0] == exp_mean_score
                assert tab_out_filtered.columns[params.prefix + "_" + params.taxid_field + "_top_all"][0] == exp_top_taxid
                assert tab_out_filtered.columns[params.prefix + "_" + params.taxid_field + "_top_classified_all"][0] == exp_top_taxid_classified
            }
        }
    }

    test("Should break when group field is missing from input"){
        tag "expect_failed"
        when {
            params {
                input_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-input.tsv"
                nodes_db_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-nodes.dmp"
                names_db_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-names.dmp"
                group_field = "missing"
                taxid_field = "taxid"
                score_field = "test_score"
                artificial_taxid = 8000
                prefix = "test"
            }
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of(params.input_path))
                input[1] = params.nodes_db_path
                input[2] = params.names_db_path
                input[3] = params.group_field
                input[4] = params.taxid_field
                input[5] = params.score_field
                input[6] = params.artificial_taxid
                input[7] = params.prefix
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("AssertionError: Group field not found in header")
            assert !process.errorReport.contains("AssertionError: Taxid field not found in header")
        }
    }

    test("Should break when taxid field is missing from input"){
        tag "expect_failed"
        when {
            params {
                input_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-input.tsv"
                nodes_db_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-nodes.dmp"
                names_db_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-names.dmp"
                group_field = "seq_id"
                taxid_field = "missing"
                score_field = "test_score"
                artificial_taxid = 8000
                prefix = "test"
            }
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of(params.input_path))
                input[1] = params.nodes_db_path
                input[2] = params.names_db_path
                input[3] = params.group_field
                input[4] = params.taxid_field
                input[5] = params.score_field
                input[6] = params.artificial_taxid
                input[7] = params.prefix
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("AssertionError: Taxid field not found in header")
            assert !process.errorReport.contains("AssertionError: Group field not found in header")
        }
    }

    test("Should break when score field is missing from input"){
        tag "expect_failed"
        when {
            params {
                input_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-input.tsv"
                nodes_db_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-nodes.dmp"
                names_db_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-names.dmp"
                group_field = "seq_id"
                taxid_field = "taxid"
                score_field = "missing"
                artificial_taxid = 8000
                prefix = "test"
            }
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of(params.input_path))
                input[1] = params.nodes_db_path
                input[2] = params.names_db_path
                input[3] = params.group_field
                input[4] = params.taxid_field
                input[5] = params.score_field
                input[6] = params.artificial_taxid
                input[7] = params.prefix
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("AssertionError: Score field not found in header")
            assert !process.errorReport.contains("AssertionError: Group field not found in header")
        }
    }

    test("Should break when root is missing from taxonomy DB"){
        tag "expect_failed"
        when {
            params {
                input_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-input.tsv"
                nodes_db_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-nodes-truncated.dmp"
                names_db_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-names.dmp"
                group_field = "seq_id"
                taxid_field = "taxid"
                score_field = "test_score"
                artificial_taxid = 8000
                prefix = "test"
            }
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of(params.input_path))
                input[1] = params.nodes_db_path
                input[2] = params.names_db_path
                input[3] = params.group_field
                input[4] = params.taxid_field
                input[5] = params.score_field
                input[6] = params.artificial_taxid
                input[7] = params.prefix
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("AssertionError: Taxonomy DB does not contain root")
            assert !process.errorReport.contains("AssertionError: Group field not found in header")
        }
    }

    test("Should break when input TSV is not sorted by group field"){
        tag "expect_failed"
        when {
            params {
                input_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-input-unsorted.tsv"
                nodes_db_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-nodes.dmp"
                names_db_path = "${projectDir}/test-data/toy-data/lca-taxonomy/test-names.dmp"
                group_field = "seq_id"
                taxid_field = "taxid"
                score_field = "test_score"
                artificial_taxid = 8000
                prefix = "test"
            }
            process {
                '''
                input[0] = Channel.of("test")
                    | combine(Channel.of(params.input_path))
                input[1] = params.nodes_db_path
                input[2] = params.names_db_path
                input[3] = params.group_field
                input[4] = params.taxid_field
                input[5] = params.score_field
                input[6] = params.artificial_taxid
                input[7] = params.prefix
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("AssertionError: Group ID out of order")
            assert !process.errorReport.contains("AssertionError: Group field not found in header")
        }
    }

}