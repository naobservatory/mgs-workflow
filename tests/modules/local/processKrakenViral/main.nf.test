nextflow_process {

    name "Test process PROCESS_KRAKEN_VIRAL_2"
    script "modules/local/processKrakenViral/main.nf"
    process "PROCESS_KRAKEN_VIRAL_2"

    test("On paired data, should run without errors and preserve lines") {
        config "tests/run.config"
        setup {
            run("LOAD_SAMPLESHEET") {
                script "subworkflows/local/loadSampleSheet/main.nf"
                process {
                    '''
                    input[0] = "${projectDir}/test-data/samplesheet.csv"
                    input[1] = false
                    input[2] = false
                    '''
                }
            }
            run("INTERLEAVE_FASTQ") {
                script "modules/local/interleaveFastq/main.nf"
                process {
                    '''
                    input[0] = LOAD_SAMPLESHEET.out.samplesheet
                    '''
                }
            }
            run("TAXONOMY_STREAMED") {
                script "subworkflows/local/taxonomyStreamed/main.nf"
                workflow {
                    '''
                    input[0] = INTERLEAVE_FASTQ.out.output
                    input[1] = "${params.ref_dir}/results/kraken_db"
                    input[2] = "D"
                    input[3] = params.single_end
                    '''
                }
            }
        }
        when {
            params {}
            process {
                '''
                input[0] = TAXONOMY_STREAMED.out.kraken_output
                input[1] = "${params.ref_dir}/results/total-virus-db-annotated.tsv.gz"
                input[2] = params.host_taxon
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output should have correct dimensions
            def tab_in = path(process.out.input[0][1]).csv(sep: "\t", decompress: true, header: false)
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            assert tab_out.columnCount == 7
            assert tab_in.columnCount == 5
            assert tab_out.rowCount == tab_in.rowCount
            // Some output columns should match input exactly
            assert tab_out.columns["kraken_encoded_hits"] == tab_in.columns["C4"]
            assert tab_out.columns["seq_id"] == tab_in.columns["C1"]
            assert tab_out.columns["kraken_length"] == tab_in.columns["C3"]
            // Others should map to inputs 1:1
            for (int i = 0; i < tab_out.rowCount; i++){
                if (tab_in.rows[i]["C0"] == "C") {
                    assert tab_out.rows[i]["kraken_classified"] == true
                } else if (tab_in.rows[i]["C0"] == "U") {
                    assert tab_out.rows[i]["kraken_classified"] == false
                } else {
                    assert tab_out.rows[i]["kraken_classified"] == "NA"
                }
            }
            // TODO: Add test for name & taxid fields (too complex for right now)
        }
    }
}
