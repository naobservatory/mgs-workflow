nextflow_process {

    name "Test process ADD_FIXED_COLUMN"
    script "modules/local/addFixedColumn/main.nf"
    process "ADD_FIXED_COLUMN"
    config "tests/configs/run.config"
    tag "module"
    tag "add_fixed_column"
    
    test("Should handle completely empty input file") {
        tag "expect_success"
        tag "empty_input"
        when {
            params {}
            process {
                '''
                input[0] = "${projectDir}/test-data/toy-data/empty_file.txt"
                input[1] = "test_column"
                input[2] = "test_value"
                input[3] = "test"
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            
            // Output file should exist but be empty
            def output_file = path(process.out.output[0])
            assert output_file.exists()
            assert output_file.text.size() == 0
        }
    }
    
    test("Should handle header-only input file") {
        tag "expect_success"
        tag "header_only"
        when {
            params {}
            process {
                '''
                input[0] = "${projectDir}/test-data/toy-data/test_tab_empty.tsv"
                input[1] = "test_column"
                input[2] = "test_value"
                input[3] = "test"
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            
            // Output should have correct header only
            def output_file = path(process.out.output[0])
            
            // Read the file manually to avoid issues with compressed file handling
            def content = output_file.text.split("\n")
            
            // There should be only a header line
            assert content.size() == 1
            
            // Header should have the expected columns
            def header_fields = content[0].split("\t")
            assert header_fields.size() == 4
            assert header_fields[0] == "x"
            assert header_fields[1] == "y"
            assert header_fields[2] == "z"
            assert header_fields[3] == "test_column"
        }
    }

    test("Should break when column is already present in tsv"){
        tag "expect_failed"
        when {
            params {}
            process {
                '''
                input[0] = "${projectDir}/test-data/toy-data/test_tab_sorted.tsv"
                input[1] = "x"
                input[2] = "test"
                input[3] = "test"
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("ValueError: Column already exists")
        }
    }

    test("Should run without failures on correct input and produce correct output"){
        tag "expect_success"
        when {
            params {
                test_column = "test_column"
                test_value = "test_value"
            }
            process {
                '''
                input[0] = "${projectDir}/test-data/toy-data/test_tab_sorted.tsv"
                input[1] = params.test_column
                input[2] = params.test_value
                input[3] = "test"
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output should have correct dimensions
            def tab_in = path(process.out.input[0]).csv(sep: "\t")
            def tab_out = path(process.out.output[0]).csv(sep: "\t")
            assert tab_out.columnCount == tab_in.columnCount + 1
            assert tab_out.rowCount == tab_in.rowCount
            // Output should have sample column with appropriate values
            assert params.test_column in tab_out.columnNames
            assert !(params.test_column in tab_in.columnNames)
            for (i in tab_out.columns[params.test_column]) {
                assert i == params.test_value
            }
        }
    }

}
