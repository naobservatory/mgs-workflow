nextflow_process {

    name "Test process SAMTOOLS_FILTER"
    script "modules/local/samtools/main.nf"
    process "SAMTOOLS_FILTER"
    config "tests/run_dev_se.config"
    tag "module"
    tag "samtools"

    setup {
        run("LOAD_SAMPLESHEET") {
            script "subworkflows/local/loadSampleSheet/main.nf"
            process {
                """
                input[0] = "${projectDir}/test-data/ont-samplesheet.csv"
                input[1] = true
                """
            }
        }
        run("MINIMAP2_ONT") {
            script "modules/local/minimap2/main.nf"
            process {
                """
                input[0] = LOAD_SAMPLESHEET.out.samplesheet
                input[1] = "s3://nao-mgs-simon/ont-indices/2024-12-14/minimap2-human-index/chm13v2.0.mmi"
                input[2] = "human"
                """
            }
        }
    }

    test("When run on SAM file, should only return unaligned reads") {
        tag "expect_success"
        tag "single_end"
        when {
            params {}
            process {
                '''
                input[0] = MINIMAP2_ONT.out.sam
                input[1] = "no-human"
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success

            // Output FASTQ ids should be identical to unmapped read ids in input SAM
            def fastq_out = path(process.out.reads[0][1]).fastq
            def read_ids_out = fastq_out.readNames.toSet()

            def samlines = sam(process.out.input[0][1]).getSamLines()
            def unmapped_read_ids = samlines
                .findAll { line -> line.split('\t')[1] == '4' }  // Only keep lines where flag = 4
                .collect { line -> line.split('\t')[0] }         // Get read IDs
                .toSet()                                  // Convert to Set to remove duplicates

            assert unmapped_read_ids == read_ids_out
        }
    }
}
