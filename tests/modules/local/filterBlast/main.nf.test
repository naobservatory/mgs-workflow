nextflow_process {

    name "Test process FILTER_BLAST_STREAMED"
    script "modules/local/filterBlast/main.nf"
    process "FILTER_BLAST_STREAMED"
    config "tests/run.config"

    setup {
        run("LOAD_SAMPLESHEET") {
            script "subworkflows/local/loadSampleSheet/main.nf"
            process {
                """
                input[0] = "${projectDir}/test-data/samplesheet.csv"
                input[1] = false
                input[2] = false
                """
            }
        }
        run("INTERLEAVE_FASTQ") {
            script "modules/local/interleaveFastq/main.nf"
            process {
                '''
                input[0] = LOAD_SAMPLESHEET.out.samplesheet
                '''
            }
        }
        run("CONVERT_FASTQ_FASTA") {
            script "modules/local/convertFastqFasta/main.nf"
            process {
                '''
                input[0] = INTERLEAVE_FASTQ.out.output
                '''
            }
        }
        run("BLASTN_STREAMED") {
            script "modules/local/blast/main.nf"
            process {
                '''
                input[0] = CONVERT_FASTQ_FASTA.out.output
                input[1] = "${params.ref_dir}/results/${params.blast_db_prefix}"
                input[2] = params.blast_db_prefix
                '''
            }
        }
        run("SORT_FILE", alias: "SORT_BLAST_1") {
            script "modules/local/sortFile/main.nf"
            process {
                '''
                input[0] = BLASTN_STREAMED.out.output
                input[1] = "-t\\$\'\\t\' -k1,1 -k2,2 -k7,7nr -k9,9nr"
                input[2] = "blast_test_1"
                '''
            }
        }
        run("FILTER_TSV") {
            script "modules/local/filterTsv/main.nf"
            process {
                '''
                input[0] = SORT_BLAST_1.out.output
                input[1] = "1,2"
                input[2] = "blast_test_2"
                '''
            }
        }
        run("SORT_FILE", alias: "SORT_BLAST_2") {
            script "modules/local/sortFile/main.nf"
            process {
                '''
                input[0] = FILTER_TSV.out.output
                input[1] = "-t\\$\'\\t\' -k1,1 -k7,7nr"
                input[2] = "blast_test_3"
                '''
            }
        }
    }

    test("Should run without failures on correct input") {
        when {
            params {
                max_rank = 5
                min_frac = 0.9
            }
            process {
                '''
                input[0] = SORT_BLAST_2.out.output
                input[1] = params.max_rank
                input[2] = params.min_frac
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output TSV should have expected columns
            def tab_in = path(process.out.input[0][1]).csv(sep: "\t", decompress: true, header: false)
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            assert tab_in.columnCount + 2 == tab_out.columnCount
            def cols_out_exp = ["qseqid", "sseqid", "sgi", "staxid", "qlen", "evalue",
                         "bitscore", "qcovs", "length", "pident", "mismatch",
                         "gapopen", "sstrand", "qstart", "qend", "sstart", "send",
                         "bitscore_rank_dense", "bitscore_fraction"]
            assert tab_out.columnNames == cols_out_exp
            // Output TSV should have fewer rows than input
            assert tab_in.rowCount > tab_out.rowCount
            // All output lines should meet score and/or rank criteria
            def meets_rank = false
            def meets_frac = false
            for (r in tab_out.rows){
                meets_rank = r["bitscore_rank_dense"] <= params.max_rank
                meets_frac = r["bitscore_fraction"] >= params.min_frac
                assert meets_rank || meets_frac
            }
            // TODO: Add object-level test of correct filtering
        }
    }

}
