nextflow_process {

    name "Test process ADD_SAMPLE_COLUMN"
    script "modules/local/addSampleColumn/main.nf"
    process "ADD_SAMPLE_COLUMN"
    config "tests/run.config"
    tag "module"
    tag "add_sample_column"

    test("Should break when sample_column is already present in tsv"){
        tag "expect_failed"
        when {
            params {}
            process {
                '''
                input[0] = Channel.of("test_sample")
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted.tsv"))
                input[1] = "x"
                input[2] = "test"
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("ValueError: Sample name column already exists")
        }
    }

    test("Should run without failures on correct input and produce correct output"){
        tag "expect_success"
        when {
            params {}
            process {
                '''
                input[0] = Channel.of("test_sample")
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted.tsv"))
                input[1] = "sample"
                input[2] = "test"
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output should have correct dimensions
            def tab_in = path(process.out.input[0][1]).csv(sep: "\t")
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t")
            assert tab_out.columnCount == tab_in.columnCount + 1
            assert tab_out.rowCount == tab_in.rowCount
            // Output should have sample column with appropriate values
            assert "sample" in tab_out.columnNames
            assert !("sample" in tab_in.columnNames)
            for (i in tab_out.columns["sample"]) {
                assert i == "test_sample"
            }
        }
    }

}
