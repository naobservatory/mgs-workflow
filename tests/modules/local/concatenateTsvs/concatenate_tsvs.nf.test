nextflow_process {

    name "Test process CONCATENATE_TSVS"
    script "modules/local/concatenateTsvs/main.nf"
    process "CONCATENATE_TSVS"
    config "tests/configs/run.config"
    tag "module"
    tag "concatenate_tsvs"

    setup {
        run("COPY_FILE_BARE", alias: "COPY_FILE_1") {
            script "modules/local/copyFile/main.nf"
            process {
                """
                input[0] = "${projectDir}/test-data/toy-data/test_tab_sorted.tsv"
                input[1] = "input_tsv_1.tsv"
                """
            }
        }
        run("COPY_FILE_BARE", alias: "COPY_FILE_2") {
            script "modules/local/copyFile/main.nf"
            process {
                """
                input[0] = "${projectDir}/test-data/toy-data/test_tab_sorted.tsv"
                input[1] = "input_tsv_2.tsv"
                """
            }
        }
        run("COPY_FILE_BARE", alias: "COPY_FILE_3") {
            script "modules/local/copyFile/main.nf"
            process {
                """
                input[0] = "${projectDir}/test-data/toy-data/test_tab_sorted.tsv"
                input[1] = "input_tsv_3.tsv"
                """
            }
        }
    }

    test("Should fail when input TSV column names don't match") {
        tag "expect_failed"
        when {
            params {
            }
            process {
                '''
                input[0] = COPY_FILE_1.out
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted_2.tsv"))
                input[1] = "test_mismatch"
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("ValueError: Headers do not match")
        }
    }

    test("Should run without failures on a single input TSV") {
        tag "expect_success"
        when {
            params {
            }
            process {
                '''
                input[0] = COPY_FILE_1.out
                input[1] = "test_single"
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output should have correct dimensions
            def tab_in = path(process.out.input[0]).csv(sep: "\t")
            def tab_out = path(process.out.output[0]).csv(sep: "\t", decompress: true)
            assert tab_in.columnCount == tab_out.columnCount
            assert tab_in.rowCount == tab_out.rowCount
            // Output should have same column names as input
            assert tab_in.columnNames == tab_out.columnNames
        }
    }

    test("Should run without failures on two input TSVs") {
        tag "expect_success"
        when {
            params {
            }
            process {
                '''
                input[0] = COPY_FILE_1.out.combine(COPY_FILE_2.out)
                input[1] = "test_single"
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output should have correct dimensions
            def tab_in = path(process.out.input[0]).csv(sep: "\t")
            def tab_out = path(process.out.output[0]).csv(sep: "\t", decompress: true)
            assert tab_in.columnCount == tab_out.columnCount
            assert tab_in.rowCount * 2 == tab_out.rowCount
            // Output should have same column names as input
            assert tab_in.columnNames == tab_out.columnNames
        }
    }

    test("Should run without failures on three input TSVs") {
        tag "expect_success"
        when {
            params {
            }
            process {
                '''
                input[0] = COPY_FILE_1.out.combine(COPY_FILE_2.out).combine(COPY_FILE_3.out)
                input[1] = "test_single"
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output should have correct dimensions
            def tab_in = path(process.out.input[0]).csv(sep: "\t")
            def tab_out = path(process.out.output[0]).csv(sep: "\t", decompress: true)
            assert tab_in.columnCount == tab_out.columnCount
            assert tab_in.rowCount * 3 == tab_out.rowCount
            // Output should have same column names as input
            assert tab_in.columnNames == tab_out.columnNames
        }
    }

    test("Should handle a single empty input file") {
        tag "expect_success"
        tag "empty_file"
        when {
            params {}
            process {
                '''
                input[0] = Channel.of("${projectDir}/test-data/toy-data/empty_file.txt")
                input[1] = "test_empty"
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output should be empty
            def outputFile = path(process.out.output[0])
            assert outputFile.linesGzip.size() == 0
        }
    }

    test("Should handle a mix of empty and non-empty input files") {
        tag "expect_success"
        tag "empty_file"
        setup {
            run("COPY_FILE_BARE", alias: "COPY_EMPTY") {
                script "modules/local/copyFile/main.nf"
                process {
                    """
                    input[0] = "${projectDir}/test-data/toy-data/empty_file.txt"
                    input[1] = "empty_test_file.txt"
                    """
                }
            }
        }
        when {
            params {}
            process {
                '''
                input[0] = COPY_FILE_1.out.combine(COPY_EMPTY.out)
                input[1] = "test_mixed"
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // The output should match the regular input file because empty files are skipped
            def inputFile = path(process.out.input[0])
            def outputFile = path(process.out.output[0])
            assert outputFile.md5 == inputFile.md5
        }
    }

    test("Should handle all empty input files") {
        tag "expect_success"
        tag "empty_file"
        setup {
            run("COPY_FILE_BARE", alias: "COPY_EMPTY1") {
                script "modules/local/copyFile/main.nf"
                process {
                    """
                    input[0] = "${projectDir}/test-data/toy-data/empty_file.txt"
                    input[1] = "empty_test_file1.txt"
                    """
                }
            }
            run("COPY_FILE_BARE", alias: "COPY_EMPTY2") {
                script "modules/local/copyFile/main.nf"
                process {
                    """
                    input[0] = "${projectDir}/test-data/toy-data/empty_file.txt"
                    input[1] = "empty_test_file2.txt"
                    """
                }
            }
        }
        when {
            params {}
            process {
                '''
                input[0] = COPY_EMPTY1.out.combine(COPY_EMPTY2.out)
                input[1] = "test_all_empty"
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output should be empty
            def outputFile = path(process.out.output[0])
            assert outputFile.linesGzip.size() == 0
        }
    }

}
