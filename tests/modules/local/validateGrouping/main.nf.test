nextflow_process {

    name "Test process VALIDATE_GROUPING"
    script "modules/local/validateGrouping/main.nf"
    process "VALIDATE_GROUPING"
    config "tests/configs/run.config"
    tag "module"
    tag "validateGrouping"

    test("When all virus hits have grouping and some zero-VV samples exist, should succeed") {
        tag "expect_success"
        tag "zero_vv_samples"
        when {
            process {
                """
                input[0] = tuple("test1", 
                                "${projectDir}/test-data/toy-data/test-virus-hits-for-validation.tsv", 
                                "${projectDir}/test-data/toy-data/test-grouping-zero-vv.tsv")
                input[1] = "sample"
                input[2] = "validation"
                """
            }
        }
        then {
            assert process.success
            
            // Parse structured data
            def inputVirusHits = path(process.out.input[0][1]).csv(sep: "\t")
            def inputGrouping = path(process.out.input[0][2]).csv(sep: "\t")
            def validatedGrouping = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            def zeroVvLog = path(process.out.zero_vv_log[0][1]).csv(sep: "\t")
            
            // Get sample sets
            def virusHitSamples = inputVirusHits.columns["sample"].toSet()
            def originalGroupingSamples = inputGrouping.columns["sample"].toSet()
            def validatedSamples = validatedGrouping.columns["sample"].toSet()
            def zeroVvSamples = zeroVvLog.columns["sample_id"].toSet()
            
            // Validation logic checks - derive expected values from input files
            def expectedZeroVvSamples = originalGroupingSamples - virusHitSamples
            def expectedValidatedSamples = originalGroupingSamples.intersect(virusHitSamples)
            
            // Ensure validated grouping contains only samples with virus hits
            assert validatedSamples == expectedValidatedSamples
            assert validatedSamples == virusHitSamples
            
            // Ensure zero-VV samples are correctly identified and excluded
            assert zeroVvSamples == expectedZeroVvSamples
            assert validatedSamples.intersect(zeroVvSamples).isEmpty()
            
            // Validate data preservation for kept samples
            for (int i = 0; i < validatedGrouping.rowCount; i++) {
                def sample = validatedGrouping.columns["sample"][i]
                def inputIndex = inputGrouping.columns["sample"].findIndexOf { it == sample }
                
                assert validatedGrouping.columns["group"][i] == inputGrouping.columns["group"][inputIndex]
                assert validatedGrouping.columns["site"][i] == inputGrouping.columns["site"][inputIndex]
                assert validatedGrouping.columns["date"][i] == inputGrouping.columns["date"][inputIndex]
            }
        }
    }

    test("When virus hit sample is missing from grouping, should fail validation") {
        tag "expect_failure"
        tag "missing_grouping"
        when {
            process {
                """
                input[0] = tuple("test2", 
                                "${projectDir}/test-data/toy-data/test-virus-hits-for-validation.tsv", 
                                "${projectDir}/test-data/toy-data/test-grouping-missing.tsv")
                input[1] = "sample"
                input[2] = "validation"
                """
            }
        }
        then {
            assert process.failed
            assert process.errorReport.contains("samples with virus hits are missing grouping information")
        }
    }

    test("When all samples match perfectly, should succeed with no zero-VV samples") {
        tag "expect_success"
        tag "perfect_match"
        when {
            process {
                """
                input[0] = tuple("test3", 
                                "${projectDir}/test-data/toy-data/test-virus-hits-for-validation.tsv", 
                                "${projectDir}/test-data/toy-data/test-grouping-complete.tsv")
                input[1] = "sample"
                input[2] = "validation"
                """
            }
        }
        then {
            assert process.success
            
            def inputVirusHits = path(process.out.input[0][1]).csv(sep: "\t")
            def validatedGrouping = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            def zeroVvLog = path(process.out.zero_vv_log[0][1]).csv(sep: "\t")
            
            // All samples with virus hits should be in validated output
            def virusHitSamples = inputVirusHits.columns["sample"].toSet()
            def validatedSamples = validatedGrouping.columns["sample"].toSet()
            assert validatedSamples == virusHitSamples
            
            // No zero-VV samples (only header in log)
            assert zeroVvLog.rowCount == 0
        }
    }

    test("When virus hits file is empty, should handle gracefully") {
        tag "expect_success"
        tag "empty_input"
        when {
            process {
                """
                input[0] = tuple("test4", 
                                "${projectDir}/test-data/toy-data/test-virus-hits-empty.tsv", 
                                "${projectDir}/test-data/toy-data/test-grouping-zero-vv.tsv")
                input[1] = "sample"
                input[2] = "validation"
                """
            }
        }
        then {
            assert process.success
            
            def validatedGrouping = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            def zeroVvLog = path(process.out.zero_vv_log[0][1]).csv(sep: "\t")
            
            // No samples should remain in validated output (only header)
            assert validatedGrouping.rowCount == 0
            
            // All grouping samples should be logged as zero-VV
            def inputGrouping = path(process.out.input[0][2]).csv(sep: "\t")
            def originalGroupingSamples = inputGrouping.columns["sample"].toSet()
            def zeroVvSamples = zeroVvLog.columns["sample_id"].toSet()
            
            assert zeroVvLog.rowCount == originalGroupingSamples.size()
            assert zeroVvSamples == originalGroupingSamples
        }
    }
}
