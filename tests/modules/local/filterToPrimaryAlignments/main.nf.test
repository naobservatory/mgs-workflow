// Helper function: filter table for primary alignments (is_secondary == false)
def filter_primary_alignments = { tab_in -> 
    csv(tab_in.table.where(tab_in.table.booleanColumn("is_secondary").isFalse()))
}

nextflow_process {

    name "Test process FILTER_TO_PRIMARY_ALIGNMENTS"
    script "modules/local/filterToPrimaryAlignments/main.nf"
    process "FILTER_TO_PRIMARY_ALIGNMENTS"
    config "tests/configs/run.config"
    tag "module"
    tag "filter_to_primary_alignments"

    test("Should fail when is_secondary column is missing") {
        tag "expect_failed"
        tag "harmon"
        
        setup {
            run("GZIP_FILE", alias: "GZIP_MISSING_COLUMN") {
                script "modules/local/gzipFile/main.nf"
                process {
                    '''
                    input[0] = Channel.of("test")
                        | combine(Channel.of("${projectDir}/test-data/toy-data/test_joined_missing_column.tsv"))
                    '''
                }
            }
        }
        
        when {
            params {}
            process {
                '''
                input[0] = GZIP_MISSING_COLUMN.out
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("Missing required columns: ['is_secondary']")
        }
    }

    test("Should filter primary alignments successfully") {
        tag "expect_success"
        
        setup {
            run("GZIP_FILE", alias: "GZIP_WITH_SECONDARY") {
                script "modules/local/gzipFile/main.nf"
                process {
                    '''
                    input[0] = Channel.of("test")
                        | combine(Channel.of("${projectDir}/test-data/toy-data/test_joined_with_secondary.tsv"))
                    '''
                }
            }
        }
        
        when {
            params {}
            process {
                '''
                input[0] = GZIP_WITH_SECONDARY.out
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            
            // Generate expected output from input using helper function
            def tab_in = path(process.out.input[0][1]).csv(sep: "\t", decompress: true)
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            def tab_exp = filter_primary_alignments(tab_in)
            
            // Compare output with expected filtered input
            assert tab_out.columnCount == tab_exp.columnCount
            assert tab_out.rowCount == tab_exp.rowCount
            assertTableEquals tab_exp, tab_out
            
            // Check that all rows have is_secondary = False
            def isSecondaryColumn = tab_out.columns["is_secondary"]
            for (value in isSecondaryColumn) {
                assert value == false
            }
        }
    }

    test("Should handle input with no secondary alignments") {
        tag "expect_success"
        
        setup {
            run("GZIP_FILE", alias: "GZIP_NO_SECONDARY") {
                script "modules/local/gzipFile/main.nf"
                process {
                    '''
                    input[0] = Channel.of("test")
                        | combine(Channel.of("${projectDir}/test-data/toy-data/test_joined_no_secondary.tsv"))
                    '''
                }
            }
        }
        
        when {
            params {}
            process {
                '''
                input[0] = GZIP_NO_SECONDARY.out
                '''
            }
        }
        then {
            // Should run without errors
            assert process.success
            
            // Generate expected output from input using helper function
            def tab_in = path(process.out.input[0][1]).csv(sep: "\t", decompress: true)
            def tab_out = path(process.out.output[0][1]).csv(sep: "\t", decompress: true)
            def tab_exp = filter_primary_alignments(tab_in)
            
            // Compare output with expected filtered input
            assert tab_out.columnCount == tab_exp.columnCount
            assert tab_out.rowCount == tab_exp.rowCount
            assertTableEquals tab_exp, tab_out
            
            // Since input has no secondary alignments, input and output should have same number of rows
            assert tab_out.rowCount == tab_in.rowCount
        }
    }
}
