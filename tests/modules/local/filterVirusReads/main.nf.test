// Helper function: manual table filtering
def filter_tab = { tab_in, threshold -> csv(tab_in.table.where(
    tab_in.table.intColumn("kraken_assigned_host_virus").isEqualTo(1).or(
        tab_in.table.numberColumn("bowtie2_length_normalized_score_max").isGreaterThanOrEqualTo(threshold).and(
            tab_in.table.intColumn("kraken_assigned_host_virus").isEqualTo(2).or(
                tab_in.table.booleanColumn("kraken_classified").isFalse()))))) }

nextflow_process {

    name "Test process FILTER_VIRUS_READS_STREAMED"
    script "modules/local/filterVirusReads/main.nf"
    process "FILTER_VIRUS_READS_STREAMED"
    config "tests/run.config"

    test("Should break when input is missing required headers (seq_id)"){
        tag "expect_failed"
        setup {
            run("REHEAD_TSV") {
                script "modules/local/reheadTsv/main.nf"
                process {
                    '''
                    input[0] = Channel.of("test")
                        | combine(Channel.of("${projectDir}/test-data/toy-data/virus-hits-test.tsv.gz"))
                    input[1] = "seq_id"
                    input[2] = "test"
                    input[3] = "test"
                    '''
                }
            }
        }
        when {
            params {}
            process {
                '''
                input[0] = REHEAD_TSV.out.output.map{ it[1] }
                input[1] = 0
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("ValueError: Missing column in input TSV: 'seq_id'")
        }
    }

    test("Should break when input is missing required headers (kraken_classified)"){
        tag "expect_failed"
        setup {
            run("REHEAD_TSV") {
                script "modules/local/reheadTsv/main.nf"
                process {
                    '''
                    input[0] = Channel.of("test")
                        | combine(Channel.of("${projectDir}/test-data/toy-data/virus-hits-test.tsv.gz"))
                    input[1] = "kraken_classified"
                    input[2] = "test"
                    input[3] = "test"
                    '''
                }
            }
        }
        when {
            params {}
            process {
                '''
                input[0] = REHEAD_TSV.out.output.map{ it[1] }
                input[1] = 0
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("ValueError: Missing column in input TSV: 'kraken_classified'")
        }
    }

    test("Should break when input is missing required headers (kraken_assigned_host_virus)"){
        tag "expect_failed"
        setup {
            run("REHEAD_TSV") {
                script "modules/local/reheadTsv/main.nf"
                process {
                    '''
                    input[0] = Channel.of("test")
                        | combine(Channel.of("${projectDir}/test-data/toy-data/virus-hits-test.tsv.gz"))
                    input[1] = "kraken_assigned_host_virus"
                    input[2] = "test"
                    input[3] = "test"
                    '''
                }
            }
        }
        when {
            params {}
            process {
                '''
                input[0] = REHEAD_TSV.out.output.map{ it[1] }
                input[1] = 0
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("ValueError: Missing column in input TSV: 'kraken_assigned_host_virus'")
        }
    }

    test("Should break when input is missing required headers (bowtie2_length_normalized_score_max)"){
        tag "expect_failed"
        setup {
            run("REHEAD_TSV") {
                script "modules/local/reheadTsv/main.nf"
                process {
                    '''
                    input[0] = Channel.of("test")
                        | combine(Channel.of("${projectDir}/test-data/toy-data/virus-hits-test.tsv.gz"))
                    input[1] = "bowtie2_length_normalized_score_max"
                    input[2] = "test"
                    input[3] = "test"
                    '''
                }
            }
        }
        when {
            params {}
            process {
                '''
                input[0] = REHEAD_TSV.out.output.map{ it[1] }
                input[1] = 0
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("ValueError: Missing column in input TSV: 'bowtie2_length_normalized_score_max'")
        }
    }

    test("Should break when Kraken fields are inconsistent (viral but not classified)"){
        tag "expect_failed"
        when {
            params {}
            process {
                '''
                input[0] = "${projectDir}/test-data/toy-data/virus-hits-test-broken.tsv.gz"
                input[1] = 0
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("Inconsistent Kraken fields: 'kraken_classified' is False, but 'kraken_assigned_host_virus' is not 0")
        }
    }

    test("Should run without failures on correct input and produce correct output (threshold = 15)"){
        tag "expect_success"
        when {
            params {}
            process {
                '''
                input[0] = "${projectDir}/test-data/toy-data/virus-hits-test.tsv.gz"
                input[1] = 15
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Generate expected output from input
            def tab_in = path(process.out.input[0]).csv(sep: "\t", decompress: true)
            def tab_out = path(process.out.output[0]).csv(sep: "\t", decompress: true)
            def tab_exp = filter_tab(tab_in, 15)
            assert tab_out.columnCount == tab_exp.ColumnCount
            assert tab_out.rowCount == tab_exp.rowCount
            assertTableEquals tab_exp, tab_out
            // Verify output manually
            assert tab_out.rowCount == 10
        }
    }

    test("Should run without failures on correct input and produce correct output (threshold = 25)"){
        tag "expect_success"
        when {
            params {}
            process {
                '''
                input[0] = "${projectDir}/test-data/toy-data/virus-hits-test.tsv.gz"
                input[1] = 25
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Generate expected output from input
            def tab_in = path(process.out.input[0]).csv(sep: "\t", decompress: true)
            def tab_out = path(process.out.output[0]).csv(sep: "\t", decompress: true)
            def tab_exp = filter_tab(tab_in, 25)
            assert tab_out.columnCount == tab_exp.ColumnCount
            assert tab_out.rowCount == tab_exp.rowCount
            assertTableEquals tab_exp, tab_out
            // Verify output manually
            assert tab_out.rowCount == 6
        }
    }

    test("Should run without failures on correct input and produce correct output (threshold = 100)"){
        tag "expect_success"
        when {
            params {}
            process {
                '''
                input[0] = "${projectDir}/test-data/toy-data/virus-hits-test.tsv.gz"
                input[1] = 100
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Generate expected output from input
            def tab_in = path(process.out.input[0]).csv(sep: "\t", decompress: true)
            def tab_out = path(process.out.output[0]).csv(sep: "\t", decompress: true)
            def tab_exp = filter_tab(tab_in, 100)
            assert tab_out.columnCount == tab_exp.ColumnCount
            assert tab_out.rowCount == tab_exp.rowCount
            assertTableEquals tab_exp, tab_out
            // Verify output manually
            assert tab_out.rowCount == 4
        }
    }

    test("Should run without failures on correct input and produce correct output (threshold = 0)"){
        tag "expect_success"
        when {
            params {}
            process {
                '''
                input[0] = "${projectDir}/test-data/toy-data/virus-hits-test.tsv.gz"
                input[1] = 0
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Generate expected output from input
            def tab_in = path(process.out.input[0]).csv(sep: "\t", decompress: true)
            def tab_out = path(process.out.output[0]).csv(sep: "\t", decompress: true)
            def tab_exp = filter_tab(tab_in, 0)
            assert tab_out.columnCount == tab_exp.ColumnCount
            assert tab_out.rowCount == tab_exp.rowCount
            assertTableEquals tab_exp, tab_out
            // Verify output manually
            assert tab_out.rowCount == 12
        }
    }

}
