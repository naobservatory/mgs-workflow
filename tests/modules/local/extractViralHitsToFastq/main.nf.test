def countGzipLines = { file -> path(file).linesGzip.size() }
nextflow_process {

    name "Test process EXTRACT_VIRAL_HITS_TO_FASTQ"
    script "modules/local/extractViralHitsToFastq/main.nf"
    process "EXTRACT_VIRAL_HITS_TO_FASTQ"
    config "tests/configs/run.config"
    tag "module"
    tag "extract_viral_hits_to_fastq"

    setup {
        run("GZIP_FILE", alias: "GZIP_FASTQ") {
            script "modules/local/gzipFile/main.nf"
            process {
                '''
                input[0] = Channel.of("test_fastq")
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test-random.fastq"))
                '''
            }
        }
        run("GZIP_FILE", alias: "GZIP_SORTED") {
            script "modules/local/gzipFile/main.nf"
            process {
                '''
                input[0] = Channel.of("test_fastq")
                    | combine(Channel.of("${projectDir}/test-data/toy-data/test_tab_sorted.tsv"))
                '''
            }
        }
        run("GZIP_FILE", alias: "GZIP_HITS") {
            script "modules/local/gzipFile/main.nf"
            process {
                '''
                input[0] = Channel.of("test_fastq")
                    | combine(Channel.of("${projectDir}/test-data/toy-data/virus-hits-test.tsv"))
                '''
            }
        }
    }

    test("Should fail with appropriate error when seq_id is missing from input tsv") {
        tag "expect_failed"
        when {
            params {}
            process {
                '''
                input[0] = GZIP_SORTED.out.map{it[1]}
                input[1] = GZIP_FASTQ.out.map{it[1]}
                '''
            }
        }
        then {
            assert process.failed
            assert process.exitStatus == 1
            assert process.errorReport.contains("ERROR: No column named 'seq_id' in header")
        }
    }

    test("On paired data, should run without errors and preserve lines") {
        tag "expect_success"
        when {
            params {}
            process {
                '''
                input[0] = GZIP_HITS.out.map{it[1]}
                input[1] = GZIP_FASTQ.out.map{it[1]}
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Output IDs should match input TSV
            def tab_in = path(process.out.input_tsv[0]).csv(sep: "\t", decompress: true)
            def ids_out = path(process.out.ids[0]).csv(sep: "\t", decompress: true, header: false)
            assert ids_out.columnCount == 1
            assert tab_in.rowCount == ids_out.rowCount
            assert tab_in.columns["seq_id"] == ids_out.columns["C0"]
            // Output FASTQ should have appropriate line count (interleaved)
            def fastq_in = path(process.out.input_fastq[0]).fastq
            def fastq_out = path(process.out.fastq[0]).fastq
            assert fastq_in.getNumberOfRecords() % 2 == 0
            assert fastq_out.getNumberOfRecords() % 2 == 0
            // Output FASTQ should be subset of input FASTQ
            assert fastq_out.getNumberOfRecords() < fastq_in.getNumberOfRecords()
            for (r in fastq_out.readNames) {
                assert r in fastq_in.readNames
            }
            // Output FASTQ should only have IDs from input TSV
            def fastq_ids_in = fastq_in.readNames.collect{ it.tokenize(" ")[0] }
            def fastq_ids_out = fastq_out.readNames.collect{ it.tokenize(" ")[0] }
            for (id in fastq_ids_in) {
                if (id in ids_out.columns["C0"]) {
                    assert id in fastq_ids_out
                } else {
                    assert !(id in fastq_ids_out)
                }
            }
        }
    }
    
    test("Should handle completely empty input TSV and produce empty output files") {
        tag "empty_file"
        tag "expect_success"
        setup {
            run("GZIP_FILE", alias: "GZIP_EMPTY") {
                script "modules/local/gzipFile/main.nf"
                process {
                    '''
                    input[0] = Channel.of("test_empty")
                        | combine(Channel.of("${projectDir}/test-data/toy-data/empty_file.txt"))
                    '''
                }
            }
        }
        when {
            params {}
            process {
                '''
                input[0] = GZIP_EMPTY.out.map{it[1]}
                input[1] = GZIP_FASTQ.out.map{it[1]}
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            
            // Output files should be empty
            def ids_out = path(process.out.ids[0])
            assert ids_out.linesGzip.size() == 0
            
            def fastq_out = path(process.out.fastq[0])
            assert fastq_out.linesGzip.size() == 0
        }
    }
    
    test("Should handle input TSV with header but no data rows") {
        tag "header_only"
        tag "expect_success"
        setup {
            run("HEAD_TSV") {
                script "modules/local/headTsv/main.nf"
                process {
                    '''
                    input[0] = Channel.of("test_header_only")
                        | combine(Channel.of("${projectDir}/test-data/toy-data/empty_file.txt"))
                    input[1] = "seq_id,kraken2_assigned_host_virus,aligner_length_normalized_score"
                    input[2] = "header_only"
                    '''
                }
            }
            run("GZIP_FILE", alias: "GZIP_HEADER_ONLY") {
                script "modules/local/gzipFile/main.nf"
                process {
                    '''
                    input[0] = HEAD_TSV.out.output
                    '''
                }
            }
        }
        when {
            params {}
            process {
                '''
                input[0] = GZIP_HEADER_ONLY.out.map{it[1]}
                input[1] = GZIP_FASTQ.out.map{it[1]}
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            
            // Output files should be empty
            def ids_out = path(process.out.ids[0])
            assert ids_out.linesGzip.size() == 0
            
            def fastq_out = path(process.out.fastq[0])
            assert fastq_out.linesGzip.size() == 0
        }
    }
}
