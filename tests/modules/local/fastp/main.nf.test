nextflow_process {

    name "Test process FASTP"
    script "modules/local/fastp/main.nf"
    process "FASTP"
    tag "module"
    tag "fastp"

    test("Should run correctly on interleaved data") {
        tag "expect_success"
        tag "interleaved"
        config "tests/configs/run.config"
        setup {
            run("LOAD_SAMPLESHEET") {
                script "subworkflows/local/loadSampleSheet/main.nf"
                process {
                    """
                    input[0] = "${projectDir}/test-data/samplesheet.csv"
                    input[1] = false
                    """
                }
            }
            run("INTERLEAVE_FASTQ") {
                script "modules/local/interleaveFastq/main.nf"
                process {
                    """
                    input[0] = LOAD_SAMPLESHEET.out.samplesheet
                    """
                }
            }
        }
        when {
            params {
            }
            process {
                '''
                input[0] = INTERLEAVE_FASTQ.out.output
                input[1] = "${params.adapters}"
                input[2] = true
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Input and output should be valid interleaved FASTQ
            def fastq_in = path(process.out.input[0][1]).fastq
            def fastq_pass = path(process.out.reads[0][1]).fastq
            def fastq_fail = path(process.out.failed[0][1]).fastq
            def reads_in = fastq_in.getNumberOfRecords()
            def reads_pass = fastq_pass.getNumberOfRecords()
            def reads_fail = fastq_fail.getNumberOfRecords()
            assert reads_in % 2 == 0
            assert reads_pass % 2 == 0
            assert reads_fail % 2 == 0
            // Should conserve reads between input and output
            assert reads_pass > 0
            assert reads_pass + reads_fail == reads_in
        }
    }

    test("Should run correctly on single-end data") {
        tag "expect_success"
        tag "single_end"
        config "tests/configs/run_dev_se.config"
        setup {
            run("LOAD_SAMPLESHEET") {
                script "subworkflows/local/loadSampleSheet/main.nf"
                process {
                    """
                    input[0] = "${projectDir}/test-data/single-end-samplesheet.csv"
                    input[1] = true
                    """
                }
            }
            run("COPY_FILE") {
                script "modules/local/copyFile/main.nf"
                process {
                    """
                    input[0] = LOAD_SAMPLESHEET.out.samplesheet
                    input[1] = "input.fastq.gz"
                    """
                }
            }
        }
        when {
            params {
            }
            process {
                '''
                input[0] = COPY_FILE.out
                input[1] = "${params.adapters}"
                input[2] = false
                '''
            }
        }
        then {
            // Should run without failures
            assert process.success
            // Should conserve reads between input and output
            def fastq_in = path(process.out.input[0][1]).fastq
            def fastq_pass = path(process.out.reads[0][1]).fastq
            def fastq_fail = path(process.out.failed[0][1]).fastq
            def reads_in = fastq_in.getNumberOfRecords()
            def reads_pass = fastq_pass.getNumberOfRecords()
            def reads_fail = fastq_fail.getNumberOfRecords()
            assert reads_pass > 0
            assert reads_pass + reads_fail == reads_in
        }
    }

}
