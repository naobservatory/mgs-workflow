nextflow_pipeline {

    name "Test workflow RUN"
    script "main.nf" // Running from main so we have access to published files
    tag "workflow"

    test("Short read RUN workflow should run without errors") {
        config "tests/configs/run.config"
        tag "run"
        tag "main_run_shortread"
        then {
            // Should run without failures
            assert workflow.success
        }
    }

    test("ONT RUN workflow should run without errors") {
        config "tests/configs/run_ont.config"
        tag "run_ont"
        tag "main_run_ont"
        then {
            // Should run without failures
            assert workflow.success
        }
    }

    test("Short read RUN workflow output should match snapshot") {
        config "tests/configs/run.config"
        tag "run_output"
        tag "main_run_output_shortread"
        then {
            assert workflow.success
            assert snapshot(
                path("${launchDir}/output/results/bracken_reports_merged.tsv.gz"),
                path("${launchDir}/output/results/kraken_reports_merged.tsv.gz"),
                path("${launchDir}/output/results/merged_blast_filtered.tsv.gz"),
                path("${launchDir}/output/results/merged_blast_input_subset.fasta.gz"),
                path("${launchDir}/output/results/read_counts.tsv.gz"),
                path("${launchDir}/output/results/subset_qc_adapter_stats.tsv.gz"),
                path("${launchDir}/output/results/subset_qc_basic_stats.tsv.gz"),
                path("${launchDir}/output/results/subset_qc_length_stats.tsv.gz"),
                path("${launchDir}/output/results/subset_qc_quality_base_stats.tsv.gz"),
                path("${launchDir}/output/results/subset_qc_quality_sequence_stats.tsv.gz"),
                path("${launchDir}/output/results/virus_hits_final.tsv.gz"),
            ).match("run_output_shortread")
        }
    }

    test("ONT RUN workflow output should match snapshot") {
        config "tests/configs/run_ont.config"
        tag "run_output_ont"
        tag "main_run_output_ont"
        then {
            assert workflow.success
            assert snapshot(
                path("${launchDir}/output/results/bracken_reports_merged.tsv.gz"),
                path("${launchDir}/output/results/kraken_reports_merged.tsv.gz"),
                path("${launchDir}/output/results/merged_blast_filtered.tsv.gz"),
                path("${launchDir}/output/results/merged_blast_input_subset.fasta.gz"),
                path("${launchDir}/output/results/read_counts.tsv.gz"),
                path("${launchDir}/output/results/subset_qc_adapter_stats.tsv.gz"),
                path("${launchDir}/output/results/subset_qc_basic_stats.tsv.gz"),
                path("${launchDir}/output/results/subset_qc_length_stats.tsv.gz"),
                path("${launchDir}/output/results/subset_qc_quality_base_stats.tsv.gz"),
                path("${launchDir}/output/results/subset_qc_quality_sequence_stats.tsv.gz"),
                path("${launchDir}/output/results/virus_hits_final.tsv.gz"),
            ).match("run_output_ont")
        }
    }   
}
